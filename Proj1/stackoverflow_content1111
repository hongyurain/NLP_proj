
What are Null Pointer Exceptions (java.lang.NullPointerException) and what causes them?


What methods/tools can be used to determine the cause so that you stop the exception from causing the program to terminate prematurely?


When you declare a reference variable (i.e. an object) you are really creating a pointer to an object. Consider the following code where you declare a variable of primitive type int:


In this example, the variable x is an int and Java will initialize it to 0 for you. When you assign it the value of 10 on the second line, your value of 10 is written into the memory location referred to by x.


But, when you try to declare a reference type, something different happens. Take the following code:


The first line declares a variable named num, but it does not actually contain a primitive value yet. Instead, it contains a pointer (because the type is Integer which is a reference type). Since you have not yet said what to point to, Java sets it to null, which means "I am pointing to nothing".


In the second line, the new keyword is used to instantiate (or create) an object of type Integer, and the pointer variable num is assigned to that Integer object.


The NullPointerException occurs when you declare a variable but did not create an object and assign it to the variable before trying to use the contents of the variable (called dereferencing). So you are pointing to something that does not actually exist.


Dereferencing usually happens when using . to access a method or field, or using [ to index an array.


If you attempt to dereference num BEFORE creating the object you get a NullPointerException. In the most trivial cases, the compiler will catch the problem and let you know that "num may not have been initialized," but sometimes you may write code that does not directly create the object.


For instance, you may have a method as follows:


In which case, you are not creating the object obj, but rather assuming that it was created before the doSomething() method was called. Note, it is possible to call the method like this:


In which case, obj is null. If the method is intended to do something to the passed-in object, it is appropriate to throw the NullPointerException because it's a programmer error and the programmer will need that information for debugging purposes.  Please include the name of the object variable in the exception message, like


Alternatively, there may be cases where the purpose of the method is not solely to operate on the passed in object, and therefore a null parameter may be acceptable. In this case, you would need to check for a null parameter and behave differently. You should also explain this in the documentation. For example, doSomething() could be written as:


Finally, How to pinpoint the exception & cause using Stack Trace


What methods/tools can be used to determine the cause so that you stop
the exception from causing the program to terminate prematurely?


Sonar with find bugs can detect NPE.
Can sonar catch null pointer exceptions caused by JVM Dynamically


Now Java 14 has added a new language feature to show the root cause of NullPointerException. This language feature has been part of SAP commercial JVM since 2006. The following is 2 minutes read to understand this amazing language feature.


https://jfeatures.com/blog/NullPointerException


In java 14 following is sample NullPointerException Exception message:


in thread "main" java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because "list" is null


NullPointerExceptions are exceptions that occur when you try to use a reference that points to no location in memory (null) as though it were referencing an object.  Calling a method on a null reference or trying to access a field of a null reference will trigger a NullPointerException.  These are the most common, but other ways are listed on the NullPointerException javadoc page.


Probably the quickest example code I could come up with to illustrate a NullPointerException would be:


On the first line inside main, I'm explicitly setting the Object reference obj equal to null.  This means I have a reference, but it isn't pointing to any object.  After that, I try to treat the reference as though it points to an object by calling a method on it.  This results in a NullPointerException because there is no code to execute in the location that the reference is pointing.


(This is a technicality, but I think it bears mentioning: A reference that points to null isn't the same as a C pointer that points to an invalid memory location.  A null pointer is literally not pointing anywhere, which is subtly different than pointing to a location that happens to be invalid.)


A good place to start is the JavaDocs. They have this covered:


Thrown when an application attempts to use null in a case where an
  object is required. These include:


Applications should throw instances of this class to indicate other
  illegal uses of the null object.


It is also the case that if you attempt to use a null reference with synchronized, that will also throw this exception, per the JLS:


So you have a NullPointerException. How do you fix it? Let's take a simple example which throws a NullPointerException:


Identify the null values


The first step is identifying exactly which values are causing the exception. For this, we need to do some debugging. It's important to learn to read a stacktrace. This will show you where the exception was thrown:


Here, we see that the exception is thrown on line 13 (in the printString method). Look at the line and check which values are null by
adding logging statements or using a debugger. We find out that s is null, and calling the length method on it throws the exception. We can see that the program stops throwing the exception when s.length() is removed from the method.


Trace where these values come from


Next check where this value comes from. By following the callers of the method, we see that s is passed in with printString(name) in the print() method, and this.name is null.


Trace where these values should be set


Where is this.name set? In the setName(String) method. With some more debugging, we can see that this method isn't called at all. If the method was called, make sure to check the order that these methods are called, and the set method isn't called after the print method.


This is enough to give us a solution: add a call to printer.setName() before calling printer.print().


The variable can have a default value (and setName can prevent it being set to null):


Either the print or printString method can check for null, for example:


Or you can design the class so that name always has a non-null value:


See also:


If you tried to debug the problem and still don't have a solution, you can post a question for more help, but make sure to include what you've tried so far. At a minimum, include the stacktrace in the question, and mark the important line numbers in the code. Also, try simplifying the code first (see SSCCE).


As you should know, Java types are divided into primitive types (boolean, int, etc.) and reference types. Reference types in Java allow you to use the special value null which is the Java way of saying "no object".


A NullPointerException is thrown at runtime whenever your program attempts to use a null as if it was a real reference. For example, if you write this:


the statement labeled "HERE" is going to attempt to run the length() method on a null reference, and this will throw a NullPointerException.


There are many ways that you could use a null value that will result in a NullPointerException. In fact, the only things that you can do with a null without causing an NPE are:


Suppose that I compile and run the program above:


First observation: the compilation succeeds! The problem in the program is NOT a compilation error. It is a runtime error. (Some IDEs may warn your program will always throw an exception ... but the standard javac compiler doesn't.)


Second observation: when I run the program, it outputs two lines of "gobbledy-gook". WRONG!! That's not gobbledy-gook. It is a stacktrace ... and it provides vital information that will help you track down the error in your code if you take the time to read it carefully.


So let's look at what it says:


The first line of the stack trace tells you a number of things:


The second line is the most important one in diagnosing an NPE. 


This tells us a number of things:


If you count the lines in the file above, line 4 is the one that I labeled with the "HERE" comment.


Note that in a more complicated example, there will be lots of lines in the NPE stack trace. But you can be sure that the second line (the first "at" line) will tell you where the NPE was thrown1.


In short, the stack trace will tell us unambiguously which statement of the program has thrown the NPE.


1 - Not quite true. There are things called nested exceptions...


This is the hard part. The short answer is to apply logical inference to the evidence provided by the stack trace, the source code, and the relevant API documentation.


Let's illustrate with the simple example (above) first. We start by looking at the line that the stack trace has told us is where the NPE happened:


How can that throw an NPE?  


In fact, there is only one way: it can only happen if foo has the value null.  We then try to run the length() method on null and... BANG!


But (I hear you say) what if the NPE was thrown inside the length() method call?


Well, if that happened, the stack trace would look different. The first "at" line would say that the exception was thrown in some line in the java.lang.String class and line 4 of Test.java would be the second "at" line.


So where did that null come from? In this case, it is obvious, and it is obvious what we need to do to fix it. (Assign a non-null value to foo.)


OK, so let's try a slightly more tricky example. This will require some logical deduction.


So now we have two "at" lines. The first one is for this line:


and the second one is for this line:


Looking at the first line, how could that throw an NPE?  There are two ways:


Next, we need to figure out which of those scenarios explains what is actually happening. We will start by exploring the first one:


Where does bar come from? It is a parameter to the test method call, and if we look at how test was called, we can see that it comes from the foo static variable. In addition, we can see clearly that we initialized foo to a non-null value.  That is sufficient to tentatively dismiss this explanation. (In theory, something else could change foo to null ... but that is not happening here.)


So what about our second scenario? Well, we can see that pos is 1, so that means that foo[1] must be null. Is this possible?


Indeed it is! And that is the problem. When we initialize like this:


we allocate a String[] with two elements that are initialized to null. After that, we have not changed the contents of foo ... so foo[1] will still be null.


It's like you are trying to access an object which is null. Consider below example:


At this time you have just declared this object but not initialized or instantiated. And whenever you try to access any property or method in it, it will throw  NullPointerException which makes sense.


See this below example as well:                                        


A null pointer exception is thrown when an application attempts to use null in a case where an object is required. These include:


Applications should throw instances of this class to indicate other illegal uses of the null object. 


Reference: http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html


A null pointer is one that points to nowhere.  When you dereference a pointer p, you say "give me the data at the location stored in "p".  When p is a null pointer, the location stored in p is nowhere, you're saying "give me the data at the location 'nowhere'".  Obviously, it can't do this, so it throws a null pointer exception.


In general, it's because something hasn't been initialized properly.


A lot of explanations are already present to explain how it happens and how to fix it, but you should also follow best practices to avoid NullPointerExceptions at all.


See also:
A good list of best practices


I would add, very important, make a good use of the final modifier.
Using the "final" modifier whenever applicable in Java


Summary:


A null pointer exception is an indicator that you are using an object without initializing it.


For example, below is a student class which will use it in our code.


The below code gives you a null pointer exception.


Because you are using student, but you forgot to initialize it like in the
correct code shown below:


In Java, everything (excluding primitive types) is in the form of a class.


If you want to use any object then you have two phases:


Example:


Same for the array concept:


If you are not giving the initialization section then the NullPointerException arise.


In Java all the variables you declare are actually "references" to the objects (or primitives) and not the objects themselves.


When you attempt to execute one object method, the reference asks the living object to execute that method. But if the reference is referencing NULL (nothing, zero, void, nada)  then there is no way the method gets executed. Then the runtime let you know this by throwing a NullPointerException.


Your reference is "pointing" to null, thus "Null -> Pointer".


The object lives in the VM memory space and the only way to access it is using this references. Take this example:


And on another place in your code:


This an important thing to know - when there are no more references to an object (in the example above when reference and otherReference both point to null) then the object is "unreachable". There is no way we can work with it, so this object is ready to be garbage collected, and at some point, the VM will free the memory used by this object and will allocate another.


Another occurrence of a NullPointerException occurs when one declares an object array, then immediately tries to dereference elements inside of it.


This particular NPE can be avoided if the comparison order is reversed; namely, use .equals on a guaranteed non-null object.


All elements inside of an array are initialized to their common initial value; for any type of object array, that means that all elements are null.


You must initialize the elements in the array before accessing or dereferencing them.



I've been using the == operator in my program to compare all my strings so far.
However, I ran into a bug, changed one of them into .equals() instead, and it fixed the bug.


Is == bad? When should it and should it not be used? What's the difference?


== tests for reference equality (whether they are the same object).


.equals() tests for value equality (whether they are logically "equal"). 


Objects.equals() checks for null before calling .equals() so you don't have to (available as of JDK7, also available in Guava).


Consequently, if you want to test whether two strings have the same value you will probably want to use Objects.equals().


You almost always want to use Objects.equals(). In the rare situation where you know you're dealing with interned strings, you can use ==.


From JLS 3.10.5. String Literals:


Moreover, a string literal always refers to the same instance of class String. This is because string literals - or, more generally, strings that are the values of constant expressions (§15.28) - are "interned" so as to share unique instances, using the method String.intern.


Similar examples can also be found in JLS 3.10.5-1.


String.equalsIgnoreCase() value equality that ignores case.


String.contentEquals() compares the content of the String with the content of any CharSequence (available since Java 1.5). Saves you from having to turn your StringBuffer, etc into a String before doing the equality comparison, but leaves the null checking to you.


== tests object references, .equals() tests the string values.  


Sometimes it looks as if == compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.


For example:  


But beware of nulls! 


== handles null strings fine, but calling .equals() from a null string will cause an exception:  


So if you know that fooString1 may be null, tell the reader that by writing


The following are shorter, but it’s less obvious that it checks for null:


== compares Object references.


.equals() compares String values.


Sometimes == gives illusions of comparing String values, as in following cases:


This is because when you create any String literal, the JVM first searches for that literal in the String pool, and if it finds a match, that same reference will be given to the new String. Because of this, we get:


(a==b) ===> true


However, == fails in the following case:


In this case for new String("test") the statement new String will be created on the heap, and that reference will be given to b, so b will be given a reference on the heap, not in String pool.


Now a is pointing to a String in the String pool while b is pointing to a String on the heap. Because of that we get:


if(a==b) ===> false.


While .equals() always compares a value of String so it gives true in both cases:


So using .equals() is always better.


The == operator checks to see if the two strings are exactly the same object.


The .equals() method will check if the two strings have the same value.


Strings in Java are immutable. That means whenever you try to change/modify the string you get a new instance. You cannot change the original string. This has been done so that these string instances can be cached. A typical program contains a lot of string references and caching these instances can decrease the memory footprint and increase the performance of the program.


When using == operator for string comparison you are not comparing the contents of the string, but are actually comparing the memory address. If they are both equal it will return true and false otherwise. Whereas equals in string compares the string contents.


So the question is if all the strings are cached in the system, how come == returns false whereas equals return true? Well, this is possible. If you make a new string like String str = new String("Testing") you end up creating a new string in the cache even if the cache already contains a string having the same content. In short "MyString" == new String("MyString") will always return false.


Java also talks about the function intern() that can be used on a string to make it part of the cache so "MyString" == new String("MyString").intern() will return true.


Note: == operator is much faster than equals just because you are comparing two memory addresses, but you need to be sure that the code isn't creating new String instances in the code. Otherwise you will encounter bugs.


Make sure you understand why.  It's because the == comparison only compares references; the equals() method does a character-by-character comparison of the contents.


When you call new for a and b, each one gets a new reference that points to the "foo" in the string table.  The references are different, but the content is the same.


Yea, it's bad...


== means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.


Equals does the real comparison for you. 


Yes, == is bad for comparing Strings (any objects really, unless you know they're canonical).  == just compares object references.  .equals() tests for equality. For Strings, often they'll be the same but as you've discovered, that's not guaranteed always.


Java have a String pool under which Java manages the memory allocation for the String objects. See String Pools in Java


When you check (compare) two objects using the == operator it compares the address equality into the string-pool. If the two String objects have the same address references then it returns true, otherwise false. But if you want to compare the contents of two String objects then you must override the equals method.


equals is actually the method of the Object class, but it is Overridden into the String class and a new definition is given which compares the contents of object.


But mind it respects the case of String. If you want case insensitive compare then you must go for the equalsIgnoreCase method of the String class. 


Let's See:


I agree with the answer from zacherates.


But what you can do is to call intern() on your non-literal strings.


From zacherates example:


If you intern the non-literal String equality is true:


== compares object references in Java, and that is no exception for String objects.


For comparing the actual contents of objects (including String), one must use the equals method.


If a comparison of two String objects using == turns out to be true, that is because the String objects were interned, and the Java Virtual Machine is having multiple references point to the same instance of String. One should not expect that comparing one String object containing the same contents as another String object using == to evaluate as true.


.equals() compares the data in a class (assuming the function is implemented).
== compares pointer locations (location of the object in memory).


== returns true if both objects (NOT TALKING ABOUT PRIMITIVES) point to the SAME object instance.
.equals() returns true if the two objects contain the same data equals() Versus == in Java


That may help you.


== performs a reference equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.


The equals() method will check whether the contents or the states of 2 objects are the same.


Obviously == is faster, but will (might) give false results in many cases if you just want to tell if 2 Strings hold the same text.


Definitely the use of the equals() method is recommended.


Don't worry about the performance. Some things to encourage using String.equals():


When all is said and done, even if we have a guarantee that the strings are interns, using the equals() method is still not that overhead that one might think, definitely the recommended way. If you want an efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).


If you're like me, when I first started using Java, I wanted to use the "==" operator to test whether two String instances were equal, but for better or worse, that's not the correct way to do it in Java.


In this tutorial I'll demonstrate several different ways to correctly compare Java strings, starting with the approach I use most of the time. At the end of this Java String comparison tutorial I'll also discuss why the "==" operator doesn't work when comparing Java strings.


Option 1: Java String comparison with the equals method
Most of the time (maybe 95% of the time) I compare strings with the equals method of the Java String class, like this:


This String equals method looks at the two Java strings, and if they contain the exact same string of characters, they are considered equal.


Taking a look at a quick String comparison example with the equals method, if the following test were run, the two strings would not be considered equal because the characters are not the exactly the same (the case of the characters is different):


But, when the two strings contain the exact same string of characters, the equals method will return true, as in this example:


Option 2: String comparison with the equalsIgnoreCase method


In some string comparison tests you'll want to ignore whether the strings are uppercase or lowercase. When you want to test your strings for equality in this case-insensitive manner, use the equalsIgnoreCase method of the String class, like this:


Option 3: Java String comparison with the compareTo method


There is also a third, less common way to compare Java strings, and that's with the String class compareTo method. If the two strings are exactly the same, the compareTo method will return a value of 0 (zero). Here's a quick example of what this String comparison approach looks like:


While I'm writing about this concept of equality in Java, it's important to note that the Java language includes an equals method in the base Java Object class. Whenever you're creating your own objects and you want to provide a means to see if two instances of your object are "equal", you should override (and implement) this equals method in your class (in the same way the Java language provides this equality/comparison behavior in the String equals method).


You may want to have a look at this ==, .equals(), compareTo(), and compare()


Function:


Test:


The == operator check if the two references point to the same object or not. .equals() check for the actual string content (value).


Note that the .equals() method belongs to class Object (super class of all classes). You need to override it as per you class requirement, but for String it is already implemented, and it checks whether two strings have the same value or not.


Case 1


Reason: String literals created without null are stored in the String pool in the permgen area of heap. So both s1 and s2 point to same object in the pool.


Case 2


Reason: If you create a String object using the new keyword a separate space is allocated to it on the heap.


== compares the reference value of objects whereas the equals() method present in the java.lang.String class compares the contents of the String object (to another object).


I think that when you define a String you define an object. So you need to use .equals(). When you use primitive data types you use == but with String (and any object) you must use .equals().


If the equals() method is present in the java.lang.Object class, and it is expected to check for the equivalence of the state of objects! That means, the contents of the objects. Whereas the == operator is expected to check the actual object instances are same or not.


Example


Consider two different reference variables, str1 and str2:


If you use the equals()


You will get the output as TRUE if you use ==.  


Now you will get the FALSE as output, because both str1 and str2 are pointing to two different objects even though both of them share the same string content. It is because of new String() a new object is created every time.


Operator == is always meant for object reference comparison, whereas the String class .equals() method is overridden for content comparison:


All objects are guaranteed to have a .equals() method since Object contains a method, .equals(), that returns a boolean. It is the subclass' job to override this method if a further defining definition is required. Without it (i.e. using ==) only memory addresses are checked between two objects for equality. String overrides this .equals() method and instead of using the memory address it returns the comparison of strings at the character level for equality. 


A key note is that strings are stored in one lump pool so once a string is created it is forever stored in a program at the same address. Strings do not change, they are immutable. This is why it is a bad idea to use regular string concatenation if you have a serious of amount of string processing to do. Instead you would use the StringBuilder classes provided. Remember the pointers to this string can change and if you were interested to see if two pointers were the same == would be a fine way to go. Strings themselves do not.


You can also use the compareTo() method to compare two Strings. If the compareTo result is 0, then the two strings are equal, otherwise the strings being compared are not equal. 


The == compares the references and does not compare the actual strings. If you did create every string using new String(somestring).intern() then you can use the == operator to compare two strings, otherwise equals() or compareTo methods can only be used.


In Java, when the “==” operator is used to compare 2 objects, it checks to see if the objects refer to the same place in memory. In other words, it checks to see if the 2 object names are basically references to the same memory location. 


The Java String class actually overrides the default equals() implementation in the Object class – and it overrides the method so that it checks only the values of the strings, not their locations in memory.
 This means that if you call the equals() method to compare 2 String objects, then as long as the actual sequence of characters is equal, both objects are considered equal.


The == operator checks if the two strings are exactly the same object.


The .equals() method  check if the two strings have the same value.



I always thought Java uses pass-by-reference.


However, I've seen a couple of blog posts (for example, this blog) that claim that it isn't (the blog post says that Java uses pass-by-value).


I don't think I understand the distinction they're making.


What is the explanation?


Java is always pass-by-value.
Unfortunately, we never handle an object at all, instead juggling object-handles called references (which are passed by value of course).  The chosen terminology and semantics easily confuse many beginners.


It goes like this:


In the example above aDog.getName() will still return "Max". The value aDog within main is not changed in the function foo with the Dog "Fifi" as the object reference is passed by value. If it were passed by reference, then the aDog.getName() in main would return "Fifi" after the call to foo.


Likewise:


In the above example, Fifi is the dog's name after call to foo(aDog) because the object's name was set inside of foo(...). Any operations that foo performs on d are such that, for all practical purposes, they are performed on aDog, but it is not possible to change the value of the variable aDog itself.


I just noticed you referenced my article.


The Java Spec says that everything in Java is pass-by-value. There is no such thing as "pass-by-reference" in Java.


The key to understanding this is that something like


is not a Dog; it's actually a pointer to a Dog.


What that means, is when you have


you're essentially passing the address of the created Dog object to the foo method.


(I say essentially because Java pointers aren't direct addresses, but it's easiest to think of them that way)


Suppose the Dog object resides at memory address 42. This means we pass 42 to the method.


if the Method were defined as


let's look at what's happening.


Now let's think about what happens outside the method:


Did myDog change?


There's the key.


Keeping in mind that myDog is a pointer, and not an actual Dog, the answer is NO. myDog still has the value 42; it's still pointing to the original Dog (but note that because of line "AAA", its name is now "Max" - still the same Dog; myDog's value has not changed.)


It's perfectly valid to follow an address and change what's at the end of it; that does not change the variable, however.


Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, you cannot change where that pointer points.


In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.


If Java had pass-by-reference semantics, the foo method we defined above would have changed where myDog was pointing when it assigned someDog on line BBB.


Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.


Java always passes arguments by value, NOT by reference.


Let me explain this through an example:


I will explain this in steps:


Declaring a reference named f of type Foo and assign it a new object of type Foo with an attribute "f".





From the method side, a reference of type Foo with a name a is declared and it's initially assigned null.





As you call the method changeReference, the reference a will be assigned the object which is passed as an argument.





Declaring a reference named b of type Foo and assign it a new object of type Foo with an attribute "b".





a = b makes a new assignment to the reference a, not f, of the object whose attribute is "b".





As you call modifyReference(Foo c) method, a reference c is created and assigned the object with attribute "f".





c.setAttribute("c"); will change the attribute of the object that reference c points to it, and it's the same object that reference f points to it.





I hope you understand now how passing objects as arguments works in Java :)


This will give you some insights of how Java really works to the point that in your next discussion about Java passing by reference or passing by value you'll just smile :-)


Step one please erase from your mind that word that starts with 'p' "_ _ _ _ _ _ _", especially if you come from other programming languages. Java and 'p' cannot be written in the same book, forum, or even txt.


Step two remember that when you pass an Object into a method you're passing the Object reference and not the Object itself.


Now think of what an Object's reference/variable does/is:


In the following (please don't try to compile/execute this...):


What happens?


A picture is worth a thousand words:





Note that the anotherReferenceToTheSamePersonObject arrows is directed towards the Object and not towards the variable person!


If you didn't get it then just trust me and remember that it's better to say that Java is pass by value. Well, pass by reference value. Oh well, even better is pass-by-copy-of-the-variable-value! ;)


Now feel free to hate me but note that given this there is no difference between passing primitive data types and Objects when talking about method arguments.


You always pass a copy of the bits of the value of the reference!


Java is pass-by-value because inside a method you can modify the referenced Object as much as you want but no matter how hard you try you'll never be able to modify the passed variable that will keep referencing (not p _ _ _ _ _ _ _) the same Object no matter what!


The changeName function above will never be able to modify the actual content (the bit values) of the passed reference. In other word changeName cannot make Person person refer to another Object.


Of course you can cut it short and just say that  Java is pass-by-value!


Java is always pass by value, with no exceptions, ever.


So how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java never provides direct access to the values of objects themselves, in any circumstances. The only access to objects is through a reference to that object. Because Java objects are always accessed through a reference, rather than directly, it is common to talk about fields and variables and method arguments as being objects, when pedantically they are only references to objects. The confusion stems from this (strictly speaking, incorrect) change in nomenclature.


So, when calling a method


So if you have doSomething(foo) and public void doSomething(Foo foo) { .. } the two Foos have copied references that point to the same objects.


Naturally, passing by value a reference to an object looks very much like (and is indistinguishable in practice from) passing an object by reference.


Java passes references by value.


So you can't change the reference that gets passed in.


I feel like arguing about "pass-by-reference vs pass-by-value" is not super-helpful.


If you say, "Java is pass-by-whatever (reference/value)", in either case, you're not provide a complete answer. Here's some additional information that will hopefully aid in understanding what's happening in memory.


Crash course on stack/heap before we get to the Java implementation:
Values go on and off the stack in a nice orderly fashion, like a stack of plates at a cafeteria.
Memory in the heap (also known as dynamic memory) is haphazard and disorganized. The JVM just finds space wherever it can, and frees it up as the variables that use it are no longer needed.


Okay. First off, local primitives go on the stack. So this code:


results in this:





When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are against the word "pointer". Whatever. Just know that the address of the object goes on the stack.


Like so:





An array is an object, so it goes on the heap as well. And what about the objects in the array? They get their own heap space, and the address of each object goes inside the array.





So, what gets passed in when you call a method? If you pass in an object, what you're actually passing in is the address of the object. Some might say the "value" of the address, and some say it's just a reference to the object. This is the genesis of the holy war between "reference" and "value" proponents. What you call it isn't as important as that you understand that what's getting passed in is the address to the object.


One String gets created and space for it is allocated in the heap, and the address to the string is stored on the stack and given the identifier hisName, since the address of the second String is the same as the first, no new String is created and no new heap space is allocated, but a new identifier is created on the stack. Then we call shout(): a new stack frame is created and a new identifier, name is created and assigned the address of the already-existing String.





So, value, reference? You say "potato".


Just to show the contrast, compare the following C++ and Java snippets:


In C++: Note: Bad code - memory leaks!  But it demonstrates the point.


In Java, 


Java only has the two types of passing: by value for built-in types, and by value of the pointer for object types.


Java passes references to objects by value.


Basically, reassigning Object parameters doesn't affect the argument, e.g.,


will print out "Hah!" instead of null. The reason this works is because bar is a copy of the value of baz, which is just a reference to "Hah!". If it were the actual reference itself, then foo would have redefined baz to null.


I can't believe that nobody mentioned Barbara Liskov yet. When she designed CLU in 1974, she ran into this same terminology problem, and she invented the term call by sharing (also known as call by object-sharing and call by object) for this specific case of "call by value where the value is a reference".


The crux of the matter is that the word reference in the expression "pass by reference" means something completely different from the usual meaning of the word reference in Java. 


Usually in Java reference means a a reference to an object. But the technical terms pass by reference/value from programming language theory is talking about a reference to the memory cell holding the variable, which is something completely different.


In java everything is reference, so when you have something like:
    Point pnt1 = new Point(0,0); Java does following:





Java doesn't pass method arguments by reference; it passes them by value. I will use example from this site: 


Flow of the program:


Creating two different Point object with two different reference associated.



As expected output will be:


On this line 'pass-by-value' goes into the play... 


References pnt1 and pnt2 are passed by value to the tricky method, which means that now yours references pnt1 and pnt2 have their copies named arg1 and arg2.So pnt1 and arg1 points to the same object. (Same for the pnt2 and arg2)



In the tricky method:





Next in the tricky method


Here, you first create new temp Point reference which will point on same place like arg1 reference. Then you move reference arg1 to point to the same place like arg2 reference.
Finally arg2 will point to the same place like temp.





From here scope of tricky method is gone and you don't have access any more to the references: arg1, arg2, temp. But important note is that everything you do with these references when they are 'in life' will permanently affect object on which they are point to. 


So after executing method tricky, when you return to main, you have this situation:



So now, completely execution of program will be:


Java is always pass by value, not pass by reference


First of all, we need to understand what pass by value and pass by reference are.


Pass by value means that you are making a copy in memory of the actual parameter's value that is passed in. This is a copy of the contents of the actual parameter.


Pass by reference (also called pass by address) means that a copy of the address of the actual parameter is stored.


Sometimes Java can give the illusion of pass by reference. Let's see how it works by using the example below:


The output of this program is:


Let's understand step by step:


As we all know it will create an object in the heap and return the reference value back to t. For example, suppose the value of t is 0x100234 (we don't know the actual JVM internal value, this is just an example) .





When passing reference t to the function it will not directly pass the actual reference value of object test,  but it will create a copy of t and then pass it to the function. Since it is passing by value, it passes a copy of the variable rather than the actual reference of it. Since we said the value of t was 0x100234, both t and f will have the same value and hence they will point to the same object.





If you change anything in the function using reference f it will modify the existing contents of the object. That is why we got the output changevalue,   which is updated in the function.


To understand this more clearly, consider the following example:


Will this throw a NullPointerException? No, because it only passes a copy of the reference.
In the case of passing by reference, it could have thrown a NullPointerException, as seen below:





Hopefully this will help.


There are already great answers that cover this. I wanted to make a small contribution by sharing a very simple example (which will compile) contrasting the behaviors between Pass-by-reference in c++ and Pass-by-value in Java.


A few points:


C++ pass by reference example:


Java pass "a Java reference" by value example


EDIT


Several people have written comments which seem to indicate that either they are not looking at my examples or they don't get the c++ example. Not sure where the disconnect is, but guessing the c++ example is not clear. I'm posting the same example in pascal because I think pass-by-reference looks cleaner in pascal, but I could be wrong. I might just be confusing people more; I hope not.


In pascal, parameters passed-by-reference are called "var parameters". In the procedure setToNil below, please note the keyword 'var' which precedes the parameter 'ptr'. When a pointer is passed to this procedure, it will be passed by reference. Note the behavior: when this procedure sets ptr to nil (that's pascal speak for NULL), it will set the argument to nil--you can't do that in Java.


EDIT 2


Some excerpts from "THE Java Programming Language" by Ken Arnold, James Gosling (the guy who invented Java), and David Holmes, chapter 2, section 2.6.5


All parameters to methods are passed "by value". In other words,
  values of parameter variables in a method are copies of the invoker
  specified as arguments.


He goes on to make the same point regarding objects . . . 


You should note that when the parameter is an object reference, it is
  the object reference-not the object itself-that is passed "by value".


And towards the end of the same section he makes a broader statement about java being only pass by value and never pass by reference.


The Java programming language does not pass objects by reference; it
passes object references by value. Because two copies of the same
  reference refer to the same actual object, changes made through one
  reference variable are visible through the other. There is exactly one
  parameter passing mode-pass by value-and that helps keep things
  simple.


This section of the book has a great explanation of parameter passing in Java and of the distinction between pass-by-reference and pass-by-value and it's by the creator of Java. I would encourage anyone to read it, especially if you're still not convinced.


I think the difference between the two models is very subtle and unless you've done programming where you actually used pass-by-reference, it's easy to miss where two models differ.


I hope this settles the debate, but probably won't.


EDIT 3


I might be a little obsessed with this post. Probably because I feel that the makers of Java inadvertently spread misinformation. If instead of using the word "reference" for pointers they had used something else, say 
dingleberry, there would've been no problem. You could say, "Java passes dingleberries by value and not by reference", and nobody would be confused.


That's the reason only Java developers have issue with this. They look at the word "reference" and think they know exactly what that means, so they don't even bother to consider the opposing argument.


Anyway, I noticed a comment in an older post, which made a balloon analogy which I really liked. So much so that I decided to glue together some clip-art to make a set of cartoons to illustrate the point.


Passing a reference by value--Changes to the reference are not reflected in the caller's scope, but the changes to the object are. This is because the reference is copied, but the both the original and the copy refer to the same object.



Pass by reference--There is no copy of the reference. Single reference is shared by both the caller and the function being called. Any changes to the reference or the Object's data are reflected in the caller's scope.



EDIT 4


I have seen posts on this topic which describe the low level implementation of parameter passing in Java, which I think is great and very helpful because it makes an abstract idea concrete. However, to me the question is more about the behavior described in the language specification than about the technical implementation of the behavior. This is an exerpt from the Java Language Specification, section 8.4.1 :


When the method or constructor is invoked (§15.12), the values of the
  actual argument expressions initialize newly created parameter
  variables, each of the declared type, before execution of the body of
  the method or constructor. The Identifier that appears in the
  DeclaratorId may be used as a simple name in the body of the method or
  constructor to refer to the formal parameter.


Which means, java creates a copy of the passed parameters before executing a method. Like most people who studied compilers in college, I used "The Dragon Book" which is THE compilers book. It has a good description of "Call-by-value" and "Call-by-Reference" in Chapter 1. The Call-by-value description matches up with Java Specs exactly.


Back when I studied compilers-in the 90's, I used the first edition of the book from 1986 which pre-dated Java by about 9 or 10 years. However, I just ran across a copy of the 2nd Eddition from 2007 which actually mentions Java! Section 1.6.6 labeled "Parameter Passing Mechanisms" describes parameter passing pretty nicely. Here is an excerpt under the heading "Call-by-value" which mentions Java:


In call-by-value, the actual parameter is evaluated (if it is an
  expression) or copied (if it is a variable). The value is placed in
  the location belonging to the corresponding formal parameter of the
  called procedure. This method is used in C and Java, and is a common
  option in C++ , as well as in most other languages.


Getting an outside of the box view, let's look at Assembly or some low level memory management. At the CPU level a reference to anything immediately becomes a value if it gets written to memory or to one of the CPU registers. (That is why pointer is a good definition. It is a value, which has a purpose at the same time).


Data in memory has a Location and at that location there is a value (byte,word, whatever). In Assembly we have a convenient solution to give a Name to certain Location (aka variable), but when compiling the code, the assembler simply replaces Name with the designated location just like your browser replaces domain names with IP addresses.


Down to the core it is technically impossible to pass a reference to anything in any language without representing it (when it immediately becomes a value).


Lets say we have a variable Foo, its Location is at the 47th byte in memory and its Value is 5. We have another variable Ref2Foo which is at 223rd byte in memory, and its value will be 47. This Ref2Foo might be a technical variable, not explicitly created by the program. If you just look at 5 and 47 without any other information, you will see just two Values.
If you use them as references then to reach to 5 we have to travel:


This is how jump-tables work. 


If we want to call a method/function/procedure with Foo's value, there are a few possible way to pass the variable to the method, depending on the language and its several method invocation modes:


In every cases above a value - a copy of an existing value - has been created, it is now upto the receiving method to handle it. When you write "Foo" inside the method, it is either read out from EAX, or automatically  dereferenced, or double dereferenced, the process depends on how the language works and/or what the type of Foo dictates. This is hidden from the developer until she circumvents the dereferencing process. So a reference is a value when represented, because a reference is a value that has to be processed (at language level).


Now we have passed Foo to the method:


Nitpicking on insignificant details, even languages that do pass-by-reference will pass values to functions, but those functions know that they have to use it for dereferencing purposes. This pass-the-reference-as-value is just hidden from the programmer because it is practically useless and the terminology is only pass-by-reference.


Strict pass-by-value is also useless, it would mean that a 100 Mbyte array should have to be copied every time we call a method with the array as argument, therefore Java cannot be stricly pass-by-value. Every language would pass a reference to this huge array (as a value) and either employs copy-on-write mechanism if that array can be changed locally inside the method or allows the method (as Java does) to modify the array globally (from the caller's view) and a few languages allows to modify the Value of the reference itself.


So in short and in Java's own terminology, Java is pass-by-value where value can be: either a real value or a value that is a representation of a reference. 


Java is a call by value


How it works


You always pass a copy of the bits of the value of the reference!


If it's a primitive data type these bits contain the value of the primitive data type itself, That's why if we change the value of header inside the method then it does not reflect the changes outside.


If it's an object data type like Foo foo=new Foo() then in this case copy of the address of the object passes like file shortcut  , suppose we have a text file abc.txt at C:\desktop and suppose we make shortcut of the same file and put this inside C:\desktop\abc-shortcut so when you access the file from C:\desktop\abc.txt and write 'Stack Overflow' and close the file and again you open the file from shortcut then you write ' is the largest online community for programmers to learn' then total file change will be 'Stack Overflow is the largest online community for programmers to learn' which means it doesn't matter from where you open the file , each time we were accessing the same file , here we can assume Foo as a file and suppose foo stored at 123hd7h(original address like C:\desktop\abc.txt ) address and 234jdid(copied address like C:\desktop\abc-shortcut which actually contains the original address of the file inside) ..
So for better understanding make shortcut file and feel..


As far as I know, Java only knows call by value. This means for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects. However I think there are some pitfalls; for example, this will not work:


This will populate Hello World and not World Hello because in the swap function you use copys which have no impact on the references in the main. But if your objects are not immutable you can change it for example:


This will populate Hello World on the command line. If you change StringBuffer into String it will produce just Hello because String is immutable. For example:


However you could make a wrapper for String like this which would make it able to use it with Strings:


edit: i believe this is also the reason to use StringBuffer when it comes to "adding" two Strings because you can modifie the original object which u can't with immutable objects like String is.


No, it's not pass by reference.


Java is pass by value according to the Java Language Specification:


When the method or constructor is invoked (§15.12), the values of the actual argument expressions initialize newly created parameter variables, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the formal parameter. 


Let me try to explain my understanding with the help of four examples. Java is pass-by-value, and not pass-by-reference


/**


Pass By Value


In Java, all parameters are passed by value, i.e. assigning a method argument is not visible to the caller.


*/


Example 1:


Result


Example 2:


/**
 * 
 * Pass By Value
 *
 */


Result


Example 3:


/**
  This 'Pass By Value has a feeling of 'Pass By Reference'


Some people say primitive types and 'String' are 'pass by value'
  and objects are 'pass by reference'.


But from this example, we can understand that it is infact pass by value only,
  keeping in mind that here we are passing the reference as the value.
  ie: reference is passed by value.
  That's why are able to change and still it holds true after the local scope.
  But we cannot change the actual reference outside the original scope.
  what that means is demonstrated by next example of PassByValueObjectCase2.


*/


Result


Example 4:


/**


In addition to what was mentioned in Example3 (PassByValueObjectCase1.java),  we cannot change the actual reference outside the original scope."


Note: I am not pasting the code for private class Student. The class definition for Student is same as Example3.


*/


Result


You can never pass by reference in Java, and one of the ways that is obvious is when you want to return more than one value from a method call. Consider the following bit of code in C++:


Sometimes you want to use the same pattern in Java, but you can't; at least not directly. Instead you could do something like this:


As was explained in previous answers, in Java you're passing a pointer to the array as a value into getValues. That is enough, because the method then modifies the array element, and by convention you're expecting element 0 to contain the return value. Obviously you can do this in other ways, such as structuring your code so this isn't necessary, or constructing a class that can contain the return value or allow it to be set. But the simple pattern available to you in C++ above is not available in Java.


I thought I'd contribute this answer to add more details from the Specifications.


First, What's the difference between passing by reference vs. passing by value?


Passing by reference means the called functions' parameter will be the
  same as the callers' passed argument (not the value, but the identity
  - the variable itself). 


Pass by value means the called functions' parameter will be a copy of
  the callers' passed argument.


Or from wikipedia, on the subject of pass-by-reference


In call-by-reference evaluation (also referred to as
  pass-by-reference), a function receives an implicit reference to a
  variable used as argument, rather than a copy of its value. This
  typically means that the function can modify (i.e. assign to) the
  variable used as argument—something that will be seen by its caller.


And on the subject of pass-by-value


In call-by-value, the argument expression is evaluated, and the
  resulting value is bound to the corresponding variable in the function [...]. 
  If the function or procedure is able to assign values to its
  parameters, only its local copy is assigned [...].


Second, we need to know what Java uses in its method invocations. The Java Language Specification states


When the method or constructor is invoked (§15.12), the values of the
  actual argument expressions initialize newly created parameter
  variables, each of the declared type, before execution of the body of
  the method or constructor.


So it assigns (or binds) the value of the argument to the corresponding parameter variable. 


What is the value of the argument?


Let's consider reference types, the Java Virtual Machine Specification states


There are three kinds of reference types: class types, array types,
  and interface types. Their values are references to dynamically
  created class instances, arrays, or class instances or arrays that
  implement interfaces, respectively.


The Java Language Specification also states


The reference values (often just references) are pointers to these objects, and a special null reference, which refers to no object.


The value of an argument (of some reference type) is a pointer to an object. Note that a variable, an invocation of a method with a reference type return type, and an instance creation expression (new ...) all resolve to a reference type value.


So


all bind the value of a reference to a String instance to the method's newly created parameter, param. This is exactly what the definition of pass-by-value describes. As such, Java is pass-by-value.


The fact that you can follow the reference to invoke a method or access a field of the referenced object is completely irrelevant to the conversation. The definition of pass-by-reference was


This typically means that the function can modify (i.e. assign to) the
  variable used as argument—something that will be seen by its caller.


In Java, modifying the variable means reassigning it. In Java, if you reassigned the variable within the method, it would go unnoticed to the caller. Modifying the object referenced by the variable is a different concept entirely. 


Primitive values are also defined in the Java Virtual Machine Specification, here. The value of the type is the corresponding integral or floating point value, encoded appropriately (8, 16, 32, 64, etc. bits).


In Java only references are passed and are passed by value:


Java arguments are all passed by value (the reference is copied when used by the method) :


In the case of primitive types, Java behaviour is simple: 
The value is copied in another instance of the primitive type.


In case of Objects, this is the same: 
Object variables are pointers (buckets) holding only Object’s address that was created using the "new" keyword, and are copied like primitive types.


The behaviour can appear different from primitive types: Because the copied object-variable contains the same address (to the same Object).
Object's content/members might still be modified within a method and later access outside, giving the illusion that the (containing) Object itself was passed by reference. 


"String" Objects appear to be a good counter-example to the urban legend saying that "Objects are passed by reference":


In effect, using a method, you will never be able, to update the value of a String passed as argument:


A String Object, holds characters by an array declared final that can't be modified.
Only the address of the Object might be replaced by another using "new". 
Using "new" to update the variable, will not let the Object be accessed from outside, since the variable was initially passed by value and copied.


The distinction, or perhaps just the way I remember as I used to be under the same impression as the original poster is this: Java is always pass by value. All objects( in Java, anything except for primitives) in Java are references. These references are passed by value.


As many people mentioned it before, Java is always pass-by-value


Here is another example that will help you understand the difference (the classic swap example):


Prints:  


Before: a = 2, b = 3
  After: a = 2, b = 3


This happens because iA and iB are new local reference variables that have the same value of the passed references (they point to a and b respectively). So, trying to change the references of iA or iB will only change in the local scope and not outside of this method.


Unlike some other languages, Java does not allow you to choose between pass-by-value and pass-by-reference—all arguments are passed by value. A method call can pass two types of values to a method—copies of primitive values (e.g., values of int and double) and copies of references to objects.


When a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method.


When it comes to objects, objects themselves cannot be passed to methods. So we pass the reference(address) of the object. We can manipulate the original object using this reference.


How Java creates and stores objects: When we create an object we store the object’s address in a reference variable. Let's analyze the following statement.


“Account account1” is the type and name of the reference variable, “=” is the assignment operator, “new” asks for the required amount of space from the system. The constructor to the right of keyword new which creates the object is called implicitly by the keyword new. Address of the created object(result of right value, which is an expression called "class instance creation expression") is assigned to the left value (which is a reference variable with a name and a type specified) using the assign operator.


Although an object’s reference is passed by value, a method can still interact with the referenced object by calling its public methods using the copy of the object’s reference. Since the reference stored in the parameter is a copy of the reference that was passed as an argument, the parameter in the called method and the argument in the calling method refer to the same object in memory.


Passing references to arrays, instead of the array objects themselves, makes sense for performance reasons. Because everything in Java is passed by value, if array objects were passed,
a copy of each element would be passed. For large arrays, this would waste time and consume
considerable storage for the copies of the elements.


In the image below you can see we have two reference variables(These are called pointers in C/C++, and I think that term makes it easier to understand this feature.) in the main method. Primitive and reference variables are kept in stack memory(left side in images below). array1 and array2 reference variables "point" (as C/C++ programmers call it) or reference to a and b arrays respectively, which are objects (values these reference variables hold are addresses of objects) in heap memory (right side in images below).





If we pass the value of array1 reference variable as an argument to the reverseArray method, a reference variable is created in the method and that reference variable starts pointing to the same array (a). 





So, if we say 


in reverseArray method, it will make a change in array a.


We have another reference variable in reverseArray method (array2) that points to an array c. If we were to say 


in reverseArray method, then the reference variable array1 in method reverseArray would stop pointing to array a and start pointing to array c (Dotted line in second image).


If we return value of reference variable array2 as the return value of method reverseArray and assign this value to reference variable array1 in main method, array1 in main will start pointing to array c.


So let's write all the things we have done at once now.





And now that reverseArray method is over, its reference variables(array1 and array2) are gone. Which means we now only have the two reference variables in main method array1 and array2 which point to c and b arrays respectively. No reference variable is pointing to object (array) a. So it is eligible for garbage collection.


You could also assign value of array2 in main to array1. array1 would start pointing to b.


I always think of it as "pass by copy". It is a copy of the value be it primitive or reference. If it is a primitive it is a copy of the bits that are the value and if it is an Object it is a copy of the reference.


output of java PassByCopy:


name= Maxx
  name= Fido


Primitive wrapper classes and Strings are immutable so any example using those types will not work the same as other types/objects.


Java has only pass by value. A very simple example to validate this.


I have created a thread devoted to these kind of questions for any programming languages here.


Java is also mentioned. Here is the short summary:


A few corrections to some posts.


C does NOT support pass by reference. It is ALWAYS pass by value. C++ does support pass by reference, but is not the default and is quite dangerous.


It doesn't matter what the value is in Java: primitive or address(roughly) of object, it is ALWAYS passed by value.


If a Java object "behaves" like it is being passed by reference, that is a property of mutability and has absolutely nothing to do with passing mechanisms.


I am not sure why this is so confusing, perhaps because so many Java "programmers" are not formally trained, and thus do not understand what is really going on in memory?



I am using the Scanner methods nextInt() and nextLine() for reading input. 


It looks like this:


The problem is that after entering the numerical value, the first input.nextLine() is skipped and the second input.nextLine() is executed, so that my output looks like this:


I tested my application and it looks like the problem lies in using input.nextInt(). If I delete it, then both string1 = input.nextLine() and string2 = input.nextLine() are executed as I want them to be.


That's because the Scanner.nextInt method does not read the newline character in your input created by hitting "Enter," and so the call to Scanner.nextLine returns after reading that newline.


You will encounter the similar behaviour when you use Scanner.nextLine after Scanner.next() or any Scanner.nextFoo method (except nextLine itself).


Workaround:


Either put a Scanner.nextLine call after each Scanner.nextInt or Scanner.nextFoo to consume rest of that line including newline 


Or, even better, read the input through Scanner.nextLine and convert your input to the proper format you need. For example, you may convert to an integer using Integer.parseInt(String) method.


The problem is with the input.nextInt() method - it only reads the int value. So when you continue reading with input.nextLine() you receive the "\n" Enter key. So to skip this you have to add the input.nextLine(). Hope this should be clear now.


Try it like that:


It's because when you enter a number then press Enter, input.nextInt() consumes only the number, not the "end of line". When input.nextLine() executes, it consumes the "end of line" still in the buffer from the first input.


Instead, use input.nextLine() immediately after input.nextInt()


There seem to be many questions about this issue with java.util.Scanner. I think a more readable/idiomatic solution would be to call scanner.skip("[\r\n]+") to drop any newline characters after calling nextInt().


EDIT: as @PatrickParker noted below, this will cause an infinite loop if user inputs any whitespace after the number. See their answer for a better pattern to use with skip: https://stackoverflow.com/a/42471816/143585


It does that because input.nextInt(); doesn't capture the newline. you could do like the others proposed by adding an input.nextLine(); underneath.
Alternatively you can do it C# style and parse a nextLine to an integer like so:  


Doing this works just as well, and it saves you a line of code.


TL;DR Use scanner.skip("\\R") before each scanner.newLine() call, which is executed after:


text which represents few lines also contains non-printable characters between lines (we call them line separators) like


carriage return (CR - in String literals represented as "\r")


line feed (LF - in String literals represented as "\n")


when you are reading data from the console, it allows the user to type his response and when he is done he needs to somehow confirm that fact. To do so, the user is required to press "enter"/"return" key on the keyboard.


What is important is that this key beside ensuring placing user data to standard input (represented by System.in which is read by Scanner) also sends OS dependant line separators (like for Windows \r\n) after it.


So when you are asking the user for value like age, and user types 42 and presses enter, standard input will contain "42\r\n".


Scanner#nextInt (and other Scanner#nextType methods) doesn't allow Scanner to consume these line separators. It will read them from System.in (how else Scanner would know that there are no more digits from the user which represent age value than facing whitespace?) which will remove them from standard input, but it will also cache those line separators internally. What we need to remember, is that all of the Scanner methods are always scanning starting from the cached text.


Now Scanner#nextLine() simply collects and returns all characters until it finds line separators (or end of stream). But since line separators after reading the number from the console are found immediately in Scanner's cache, it returns empty String, meaning that Scanner was not able to find any character before those line separators (or end of stream).
BTW nextLine also consumes those line separators.


So when you want to ask for number and then for entire line while avoiding that empty string as result of nextLine, either


BTW: Scanner#nextType methods can skip delimiters (by default all whitespaces like tabs, line separators) including those cached by scanner, until they will find next non-delimiter value (token). Thanks to that for input like "42\r\n\r\n321\r\n\r\n\r\nfoobar" code


will be able to properly assign num1=42 num2=321 name=foobar.


Instead of input.nextLine() use input.next(), that should solve the problem.


Modified code:


If you want to read both strings and ints, a solution is to use two Scanners:


If you want to scan input fast without getting confused into Scanner class nextLine() method , Use Custom Input Scanner for it . 


ScanReader sc = new ScanReader(System.in);

3. Import necessary Classes : 


import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
 
4. Throw IOException from your main method to handle Exception
5. Use Provided Methods.
6. Enjoy


In order to avoid the issue, use nextLine(); immediately after nextInt(); as it helps in clearing out the buffer. When you press ENTER the nextInt(); does not capture the new line and hence, skips the Scanner code later. 


sc.nextLine() is better as compared to parsing the input.
Because performance wise it will be good.


I guess I'm pretty late to the party.. 


As previously stated, calling input.nextLine() after getting your int value will solve your problem. The reason why your code didn't work was because there was nothing else to store from your input (where you inputted the int) into string1. I'll just shed a little more light to the entire topic.


Consider nextLine() as the odd one out among the nextFoo() methods in the Scanner class. Let's take a quick example.. Let's say we have two lines of code like the ones below:


If we input the value below (as a single line of input)


54 234


The value of our firstNumber and secondNumber variable become 54 and 234 respectively. The reason why this works this way is because a new line feed (i.e \n)  IS NOT automatically generated when the nextInt() method takes in the values. It simply takes the "next int" and moves on. This is the same for the rest of the nextFoo() methods except nextLine().


nextLine() generates a new line feed immediately after taking a value; this is what @RohitJain means by saying the new line feed is "consumed".


Lastly, the next() method simply takes the nearest String without generating a new line; this makes this the preferential method for taking separate Strings within the same single line.


I hope this helps.. Merry coding!


Use 2 scanner objects instead of one


if I expect a non-empty input


used in above example:


In one of my usecase, I had the scenario of reading a string value preceded by a couple of integer values. I had to use a "for / while loop" to read the values. And none of the above suggestions worked in this case. 


Using input.next() instead of input.nextLine() fixed the issue. Hope this might be helpful for those dealing with similar scenario. 


Use this code it will fix your problem.


As nextXXX() methods don't read newline, except nextLine(). We can skip the newline after reading any non-string value (int in this case) by using scanner.skip() as below:


Why not use a new Scanner for every reading? Like below. With this approach you will not confront your problem.



What does ArrayIndexOutOfBoundsException mean and how do I get rid of it? 


Here is a code sample that triggers the exception:


Your first port of call should be the documentation which explains it reasonably clearly:


Thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.


So for example:


As for how to avoid it... um, don't do that. Be careful with your array indexes.


One problem people sometimes run into is thinking that arrays are 1-indexed, e.g.


That will miss out the first element (index 0) and throw an exception when index is 5. The valid indexes here are 0-4 inclusive. The correct, idiomatic for statement here would be:


(That's assuming you need the index, of course. If you can use the enhanced for loop instead, do so.)


Update: as per your code snippet, 


The index is inclusive the array's length. This is out of bounds. You need to replace <= by <.


From this excellent article: ArrayIndexOutOfBoundsException in for loop


To put it briefly:


In the last iteration of


i will equal name.length which is an illegal index, since array indices are zero-based.


Your code should read


It means that you are trying to access an index of an array which is not valid as it is not in between the bounds.


For example this would initialize a primitive integer array with the upper bound 4.


Programmers count from zero. So this for example would throw an ArrayIndexOutOfBoundsException as the upper bound is 4 and not 5.


To avoid an array index out-of-bounds exception, one should use the enhanced-for statement where and when they can.


The primary motivation (and use case) is when you are iterating and you do not require any complicated iteration steps.  You would not be able to use an enhanced-for to move backwards in an array or only iterate on every other element.


You're guaranteed not to run out of elements to iterate over when doing this, and your [corrected] example is easily converted over.


The code below:


...is equivalent to this:


What causes ArrayIndexOutOfBoundsException?


If you think of a variable as a "box" where you can place a value, then an array is a series of boxes placed next to eachother, where the number of boxes is a finite and explicit integer.


Creating an array like this:


creates a row of 5 boxes, each holding an int. Each of the boxes have an index, a position in the series of boxes. This index starts at 0, and ends at N-1, where N is the size of the array (the number of boxes).


To retrieve one of the values from this series of boxes, you can refer to it through its index, like this:


Which will give you the value of the 4th box in the series (since the first box has index 0).


An ArrayIndexOutOfBoundsException is caused by trying to retrive a "box" that does not exist, by passing an index that is higher than the index of last "box", or negative.


With my running example, these code snippets would produce such an exception:


How to avoid ArrayIndexOutOfBoundsException


In order to prevent ArrayIndexOutOfBoundsException, there are some key points to consider:


Looping


When looping through an array, always make sure that the index you are retrieving is strictly smaller than the length of the array (the number of boxes). For instance:


Notice the <, never mix a = in there..


You might want to be tempted to do something like this:


Just don't. Stick to the one above (if you need to use the index) and it will save you a lot of pain.


Where possible, use foreach:


This way you won't have to think about indexes at all.


When looping, whatever you do, NEVER change the value of the loop iterator (here: i). The only place this should change value is to keep the loop going. Changing it otherwise is just risking an exception, and is in most cases not neccessary.


Retrieval/update


When retrieving an arbitrary element of the array, always check that it is a valid index against the length of the array:


In your code you have accessed the elements from index 0 to the length of the string array. name.length gives the number of string objects in your array of string objects i.e. 3, but you can access only up to index 2 name[2],
because the array can be accessed from index 0 to name.length - 1 where you get name.length number of objects.


Even while using a for loop you have started with index zero and you should end with name.length - 1. In an array a[n] you can access form a[0] to a[n-1].


For example:


In your case:


For your given array the length of the array is 3(i.e. name.length = 3). But as it stores element starting from index 0, it has max index 2.


So, instead of  'i**<=name.length' you should write 'i<**name.length' to avoid 'ArrayIndexOutOfBoundsException'.


So much for this simple question, but I just wanted to highlight a new feature in Java which will avoid all confusions around indexing in arrays even for beginners. Java-8 has abstracted the task of iterating for you.


What's the benefit? Well, one thing is the readability like English. Second, you need not worry about the ArrayIndexOutOfBoundsException


You are getting ArrayIndexOutOfBoundsException due to i<=name.length part. name.length return the length of the string name, which is 3. Hence when you try to access name[3], it's illegal and throws an exception.


Resolved code:


It's defined in the Java language specification:


The public final field length, which contains the number of components
  of the array. length may be positive or zero.





That's how this type of exception looks when thrown in Eclipse. The number in red signifies the index you tried to access. So the code would look like this:


The error is thrown when you try to access an index which doesn't exist in that array. If an array has a length of 3,


then the only valid indexes are:


If an array has a length of 1,


then the only valid index is:


Any integer equal to the length of the array, or bigger than it: is out of bounds.


Any integer less than 0: is out of bounds;


P.S.: If you look to have a better understanding of arrays and do some practical exercises, there's a video here: tutorial on arrays in Java


For multidimensional arrays, it can be tricky to make sure you access the length property of the right dimension. Take the following code for example:


Each dimension has a different length, so the subtle bug is that the middle and inner loops use the length property of the same dimension (because a[i].length is the same as a[j].length).


Instead, the inner loop should use a[i][j].length (or a[0][0].length, for simplicity).


The most common case I've seen for seemingly mysterious ArrayIndexOutOfBoundsExceptions, i.e. apparently not caused by your own array handling code, is the concurrent use of SimpleDateFormat. Particularly in a servlet or controller:


If two threads enter the SimplateDateFormat.parse() method together you will likely see an ArrayIndexOutOfBoundsException. Note the synchronization section of the class javadoc for SimpleDateFormat.


Make sure there is no place in your code that are accessing thread unsafe classes like SimpleDateFormat in a concurrent manner like in a servlet or controller. Check all instance variables of your servlets and controllers for likely suspects.


ArrayIndexOutOfBoundsException whenever this exception is coming it mean you are trying to use an index of array which is out of its bounds or in lay man terms you are requesting more than than you have initialised.


To prevent this always make sure that you are not requesting a index which is not present in array i.e. if array length is 10 then your index must range between 0 to 9


ArrayIndexOutOfBounds means you are trying to index a position within an array that is not allocated.


In this case:


To get around this... 


In your for loop, you can do i < name.length. This would prevent looping to name[3] and would instead stop at name[2]


for(int i = 0; i<name.length; i++)


Use a for each loop


String[] name = { "tom", "dick", "harry" };
for(String n : name) {
    System.out.println(n);
}


Use list.forEach(Consumer action) (requires Java8)


String[] name = { "tom", "dick", "harry" };
Arrays.asList(name).forEach(System.out::println);


Convert array to stream - this is a good option if you want to perform additional 'operations' to your array e.g. filter, transform the text, convert to a map etc (requires Java8)


String[] name = { "tom", "dick", "harry" };
---  Arrays.asList(name).stream().forEach(System.out::println);
---  Stream.of(name).forEach(System.out::println);


ArrayIndexOutOfBoundsException means that you are trying to access an index of the array that does not exist or out of the bound of this array. Array indexes start from 0 and end at length - 1. 


In your case 


ArrayIndexOutOfBoundsException happens when you are trying to access 
the name.length indexed element which does not exist (array index ends at  length -1). just replacing <= with < would solve this problem. 


For any array of length n, elements of the array will have an index from 0 to n-1.


If your program is trying to access any element (or memory) having array index greater than n-1, then Java will throw ArrayIndexOutOfBoundsException


So here are two solutions that we can use in a program


Maintaining count:


Or some other looping statement like


A better way go with a for each loop, in this method a programmer has no need to bother about the number of elements in the array.


According to your Code :


If You check
System.out.print(name.length);


you will get 3;


that mean your name length is 3


your loop is running from 0 to 3 
which should be running either "0 to 2" or "1 to 3"


Answer


Each item in an array is called an element, and each element is accessed by its numerical index. As shown in the preceding illustration, numbering begins with 0. The 9th element, for example, would therefore be accessed at index 8.


IndexOutOfBoundsException is thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range.


Any array X, can be accessed from [0 to (X.length - 1)]


I see all the answers here explaining how to work with arrays and how to avoid the index out of bounds exceptions.  I personally avoid arrays at all costs.  I use the Collections classes, which avoids all the silliness of having to deal with array indices entirely.  The looping constructs work beautifully with collections supporting code that is both easier to write, understand and maintain.


If you use an array's length to control iteration of a for loop, always remember that the index of the first item in an array is 0. So the index of the last element in an array is one less than the array's length.


ArrayIndexOutOfBoundsException name itself explains that If you trying to access the value at the index which is out of the scope of Array size then such kind of exception occur. 


In your case, You can just remove equal sign from your for loop.


The better option is to iterate an array: 


This error is occurs at runs loop  overlimit times.Let's consider simple example like this,


At first, I have initialized an array as 'numberArray'. then , some array elements are printed using for loop. When loop is running 'i' time , print the (numberArray[i+1] element..(when i value is 1, numberArray[i+1] element is printed.)..Suppose that, when i=(numberArray.length-2), last element of array is printed..When 'i' value goes to (numberArray.length-1) , no value for printing..In that point , 'ArrayIndexOutOfBoundsException' is occur.I hope to you could get idea.thank you !


You can use Optional in functional style to avoid NullPointerException and ArrayIndexOutOfBoundsException :


Output:


You could not iterate or store more data than the length of your array. In this case you could do like this:


Or this:



I am developing an application, and everytime I run it, I get the message:


Unfortunately, MyApp has stopped.


What can I do to solve this?


About this question - obviously inspired by What is a stack trace, and how can I use it to debug my application errors?, there are lots of questions stating that their application has crashed, without any further detail. This question aims to instruct novice Android programmers on how to try and fix their problems themselves, or ask the right questions.


This answer describes the process of retrieving the stack trace. Already have the stack trace? Read up on stack traces in "What is a stack trace, and how can I use it to debug my application errors?"


Your application quit because an uncaught RuntimeException was thrown.
The most common of these is the NullPointerException.


Every time an Android application crashes (or any Java application for that matter), a Stack trace is written to the console (in this case, logcat). This stack trace contains vital information for solving your problem.





In the bottom bar of the window, click on the Logcat button. Alternatively, you can press alt+6. Make sure your emulator or device is selected in the Devices panel. Next, try to find the stack trace, which is shown in red. There may be a lot of stuff logged into logcat, so you may need to scroll a bit. An easy way to find the stack trace is to clear the logcat (using the recycle bin on the right), and let the app crash again.


Yay! You're halfway to solving your problem.
You only need to find out what exactly made your application crash, by analyzing the stack trace.


Read up on stack traces in "What is a stack trace, and how can I use it to debug my application errors?"


If you've found your Exception and the line where it occurred, and still cannot figure out how to fix it, don't hesitate to ask a question on StackOverflow.  


Try to be as concise as possible: post the stack trace, and the relevant code (e.g. a few lines up to the line which threw the Exception).


You can use Google's ADB tool to get Logcat file to analyze the issue.


open logcat.txt file and search for your application name. There should be information on why it failed, the line number, Class name, etc.


First, you check which point your app has crashed (Unfortunately, MyApp has stopped.). For this, you can use Log.e("TAG", "Message");, using this line you can see your app log in logcat.


After that, you find which point your app has stopped it's very easy to solve at your side. 


Just check the error in log cat. 


You get the log cat option from in eclipse:


window->show view->others->Android->Logcat


Log cat contains error.


Other wise you can also check the error by executing an application in debug mode.
Firstly set breakpoint after that by doing:


right click on project->debug as->Android application


Note: This answer is using Android Studio 2.2.2


This popup shows only when you get a fatal exception in your code which stops the execution of the app. It could be any exception NullPointerException, OutOfMemoryException etc.


Best way to check is through Logcat if you are still developing the app in Android studio which is quick way to read stack trace and check the cause of the app.


If your app is already live, then you can not use logcat. So, for that you can implement Crashlytics to provide you bug reports of any exception that occurs.


Check your Logcat message and see your Manifest file. There should be something missing like defining the Activity,User permission`, etc.


You can use any of these tools:


adb logcat


adb logcat > logs.txt (you can use editors to open and search errors.)


eclipse logcat (If not visible in eclipse, Go to Windows->Show View->Others->Android->LogCat)


Android Debug Monitor or Android Device Monitor(type command monitor or open through UI)





I suggest to use Android Debug Monitor, it is good. Because eclipse hangs when too many logs are there, and through adb logcat filter and all difficult.


You have to check the Stack trace


How to do that?


on Your IDE Check the windows form LOGCAT 


If you cant see the logcat windows go to this path and open it 


if you are using Google-Api go to this path 


adb logcat > logcat.txt


In below showToast() method you have to pass another parameter for context or application context by doing so you can try it.


Let me share a basic Logcat analysis for when you meet a Force Close (when the app stops working).


DOCS


The basic tool from Android to collect/analyze logs is the logcat. 


HERE is the Android's page about logcat


If you use android Studio, you can also check this LINK.


Capturing


Basically, you can MANUALLY capture logcat with the following command (or just check AndroidMonitor window in AndroidStudio):


There's a lot of parameters you can add to the command which helps you to filter and display the message that you want... This is personal...  I always use the command below to get the message timestamp:


You can redirect the output to a file and analyze it in a Text Editor.


Analyzing


If you app is Crashing, you'll get something like:


This part of the log shows you a lot of information:


It is important to check when the issue happened... You may find several errors in a log... you must be sure that you are checking the proper messages :)


This way, you know which app crashed (to be sure that you are checking the logs about your message)


A NULL Pointer Exception error


You tried to call method onBackPressed() from a FragmentActivity object. However, that object was null when you did it.


Stack Trace: Stack Trace shows you the method invocation order... Sometimes, the error happens in the calling method (and not in the called method).


at com.example.khan.abc.AudioFragment$1.onClick(AudioFragment.java:125)


Error happened in file com.example.khan.abc.AudioFragment.java, inside onClick() method at line: 125 (stacktrace shows the line that error happened)


It was called by:


Which was called by:


which was called by:


etc....


Overview


This was just an overview... Not all logs are simple but the error gives specific problem and verbose shows up all problem ... It is just to share the idea and provide entry-level information to you... 


I hope I could help you someway...
Regards


Use the LogCat and try to find what is causing the app to crash.


To see Logcat if you use Android Studio then Press ALT + 6
or


if you use Eclipse then 
Window -> Open Perspective -> Other - LogCat 


Go to the LogCat, from the drop down menu select error. This will contain all the required information to help you debug. If that doesn't help, post the LogCat as an edit to your question and somebody will help you out.


If your app for some reason crashes without good stacktrace. Try debug it from first line, and go line by line until crash. Then you will have answer, which line is causing you trouble. Proably you could then wrapp it into try catch block and print error output.


You can also get this error message on its own, without any stack trace or any further error message.


In this case you need to make sure your Android manifest is configured correctly (including any manifest merging happening from a library and any activity that would come from a library), and pay particular attention to the first activity displayed in your application in your manifest files.


Try my favourite tool logview to get the logs and analyze them during development.
Make sure to mark ./logview and ./lib/logview.jar as executable when running in Linux.


If you don't like it, there're a lot of alternative desktop log viewers for Android.


Integrate a real-time crash reporting tool such as Firebase Crashlytics in order to get stacktraces of unhandled exceptions which occurred on users' devices.


Read How to Release a Buggy App (And Live to Tell the Tale) to know more about handling bugs in the field.


People make mistakes, and so coding as well. 


When ever any error happened, always check with the logcat with the text in red color however u can find out the real problem in blue color text with underline in those red color text. 


Make sure if u create a new activity, always declare the activity in the AndroidManifest file.


If adding Permission, declare it in the AndroidMainifest file as well.


Logcat - To check the logs in the development phase of Android Studio


Initially clear the Logcat and let the app crash again so you can get only crashed log detail. You have to check the Stack trace


While, Unfortunately, MyApp has stopped. There are many reasons for it. You can check same in logs. For this, you can use the Log.e("TAG","Message");


Common error during app crash like:


To resolve app crash error:


First, you need to check where and why your app has been crashed (Unfortunately, MyApp has stopped.). With the help of LOG, you can figure it out what went wrong.


After that, you find which point your app has stopped fix that from your point.


If you don't have any kind of interesting log in your terminal (or they are not directly related to your app), maybe your problem is due to a native library. In that case, you should check for the "tombstone" files within your terminal. 


The default location for the tombstone files depends on every device, but if that's the case, you will have a log telling: Tombstone written to: /data/tombstones/tombstone_06


For more information, check on https://source.android.com/devices/tech/debug.


Also running this command in terminal can help find the problem:


then you should go to gradlew file location in read two above log files.



I got an error while running my Android project for RssReader. 


Code:


And it shows the below error:


How can I fix this issue?


NOTE : AsyncTask was deprecated in API level 30.
https://developer.android.com/reference/android/os/AsyncTask


This exception is thrown when an application attempts to perform a networking operation on its main thread. Run your code in AsyncTask:


How to execute the task:


In MainActivity.java file you can add this line within your oncreate() method


Don't forget to add this to AndroidManifest.xml file:


You should almost always run network operations on a thread or as an asynchronous task.


But it is possible to remove this restriction and you override the default behavior, if you are willing to accept the consequences.


Add:


In your class,


and


ADD this permission in android manifest.xml file:    


Consequences:


Your app will (in areas of spotty internet connection) become unresponsive and lock up, the user perceives slowness and has to do a force kill, and you risk the activity manager killing your app and telling the user that the app has stopped.


Android has some good tips on good programming practices to design for responsiveness:
http://developer.android.com/reference/android/os/NetworkOnMainThreadException.html


I solved this problem using a new Thread.


The accepted answer has some significant down-sides. It is not advisable to use AsyncTask for networking unless you really know what you are doing. Some of the down-sides include:


If you want to avoid short-term memory leaks, have well-defined execution characteristics across all platforms, and have a base to build really robust network handling, you might want to consider:


Down-sides:


Up-sides:


You can implement an IntentService to perform downloads on a single background thread quite easily.


Step 1: Create an IntentService to perform the download. You can tell it what to download via Intent extra's, and pass it a PendingIntent to use to return the result to the Activity:


Step 2: Register the service in the manifest:


Step 3: Invoke the service from the Activity, passing a PendingResult object which the Service will use to return the result:


Step 4: Handle the result in onActivityResult:


A Github project containing a complete working Android-Studio/Gradle project is available here.


You cannot perform network I/O on the UI thread on Honeycomb. Technically, it is possible on earlier versions of Android, but it is a really bad idea as it will cause your app to stop responding, and can result in the OS killing your app for being badly behaved. You'll need to run a background process or use AsyncTask to perform your network transaction on a background thread.


There is an article about Painless Threading on the Android developer site which is a good introduction to this, and it will provide you with a much better depth of an answer than can be realistically provided here.


Do the network actions on another thread


For Example:


And add this to AndroidManifest.xml    


Use Service or AsyncTask


See also Stack Overflow question:


android.os.NetworkOnMainThreadException sending an email from Android


You disable the strict mode using following code:


This is not recommended: use the AsyncTask interface.


Full code for both the methods


Network-based operations cannot be run on the main thread. You need to run all network-based tasks on a child thread or implement AsyncTask.


This is how you run a task in a child thread:


Put your code inside:


Or:


This happens in Android 3.0 and above. From Android 3.0 and above, they have restricted using network operations (functions that access the Internet) from running in the main thread/UI thread (what spawns from your on create and on resume methods in the activity).


This is to encourage using separate threads for network operations. See AsyncTask for more details on how to perform network activities the right way.


Using Android Annotations is an option. It will allow you to simply run any method in a background thread:


Note, that although it provides benefits of simplicity and readability, it has its disadvantages. 


The error is due to executing long running operations in main thread,You can easily rectify the problem by using AsynTask or Thread. You can checkout this library AsyncHTTPClient for better handling. 


You should not do any time-consuming task on the main thread (UI thread), like any network operation, file I/O, or SQLite database operations. So for this kind of operation, you should create a worker thread, but the problem is that you can not directly perform any UI related operation from your worker thread. For that, you have to use Handler and pass the Message. 


To simplify all these things, Android provides various ways, like AsyncTask, AsyncTaskLoader, CursorLoader or IntentService. So you can use any of these according to your requirements.


The top answer of spektom works perfect.


If you are writing the AsyncTask inline and not extending as a class, and on top of this, if there is a need to get a response out of the AsyncTask, one can use the get() method as below.


(From his example.)


This is only thrown for applications targeting the Honeycomb SDK or higher. Applications targeting earlier SDK versions are allowed to do networking on their main event loop threads.


The error is the SDK warning!


For me it was this:


The device I was testing my app on was 4.1.2 which is SDK Version 16!


Make the sure the target version is the same as your Android Target Library. If you are unsure what your target library is, right click your Project -> Build Path -> Android, and it should be the one that is ticked.


Also, as others have mentioned, include the correct permissions to access the Internet:


Use this in Your Activity


Just to spell out something explicitly:


The main thread is basically the UI thread.


So saying that you cannot do networking operations in the main thread means you cannot do networking operations in the UI thread, which means you cannot do networking operations in a *runOnUiThread(new Runnable() { ... }* block inside some other thread, either.


(I just had a long head-scratching moment trying to figure out why I was getting that error somewhere other than my main thread.  This was why; this thread helped; and hopefully this comment will help someone else.)


This exception occurs due to any heavy task performed on the main thread if that performing task takes too much time.


To avoid this, we can handle it using threads or executers


There are many great answers already on this question, but a lot of great libraries have come out since those answers were posted. This is intended as a kind of newbie-guide.


I will cover several use cases for performing network operations and a solution or two for each.


Typically Json, can be XML or something else


Let's say you are writing an app that lets users track stock prices, interest rates and currecy exchange rates. You find an Json API that looks something like this:


This is an excellent choice for an API with multiple endpoints and allows you to declare the ReST endpoints instead of having to code them individually as with other libraries like ion or Volley. (website: http://square.github.io/retrofit/)


How do you use it with the finances API?


build.gradle


Add these lines to your Module level buid.gradle:


FinancesApi.java


FinancesApiBuilder


FinancesFragment snippet


If your API requires an API Key or other header like a user token, etc. to be sent, Retrofit makes this easy (see this awesome answer for details: https://stackoverflow.com/a/42899766/1024412).


Let's say you're building a "mood weather" app that looks up the users GPS location and checks the current temperature in that area and tells them the mood. This type of app doesn't need to declare API endpoints; it just needs to be able to access one API endpoint.


This is a great library for this type of access.


Please read msysmilu's great answer (https://stackoverflow.com/a/28559884/1024412)


Volley can also be used for ReST APIs, but due to the more complicated setup required I prefer to use Retrofit from Square as above (http://square.github.io/retrofit/)


Let's say you are building a social networking app and want to load profile pictures of friends.


build.gradle


Add this line to your Module level buid.gradle:


ImageFetch.java


Volley requires more setup than Retrofit. You will need to create a class like this to setup a RequestQueue, an ImageLoader and an ImageCache, but it's not too bad:


user_view_dialog.xml


Add the following to your layout xml file to add an image:


UserViewDialog.java


Add the following code to the onCreate method (Fragment, Activity) or the constructor (Dialog):


Another excellent library from Square. Please see the site for some great examples: http://square.github.io/picasso/


In simple words,


DO NOT DO NETWORK WORK IN THE UI THREAD


For example, if you do an HTTP request, that is a network action.


Solution:


Way:


Put all your works inside


But:


When you get something from Network response and want to show it on your view (like display response message in TextView), you need to return back to the UI thread.


If you don't do it, you will get ViewRootImpl$CalledFromWrongThreadException.


How to?


You are able to move a part of your code into another thread to offload the main thread and avoid getting ANR, NetworkOnMainThreadException, IllegalStateException(e.g. Cannot access database on the main thread since it may potentially lock the UI for a long period of time).


There are some approaches that you should choose depends on the situation


Java Thread or Android HandlerThread


Java threads are one-time use only and die after executing its run method.


HandlerThread is a handy class for starting a new thread that has a looper.


AsyncTask


AsyncTask is designed to be a helper class around Thread and Handler and does not constitute a generic threading framework. AsyncTasks should ideally be used for short operations (a few seconds at the most.) If you need to keep threads running for long periods of time, it is highly recommended you use the various APIs provided by the java.util.concurrent package such as Executor, ThreadPoolExecutor and FutureTask.


Since Main thread monopolizes UI components it is not possible to access to some View, that is why Handler is on the rescue


Thread pool implementation ThreadPoolExecutor, ScheduledThreadPoolExecutor...


ThreadPoolExecutor class that implements ExecutorService which gives fine control on the thread pool (Eg, core pool size, max pool size, keep alive time, etc.)


ScheduledThreadPoolExecutor - a class that extends ThreadPoolExecutor. It can schedule tasks after a given delay or periodically.


FutureTask


FutureTask performs asynchronous processing, however, if the result is not ready yet or processing has not complete, calling get() will be block the thread


AsyncTaskLoaders


AsyncTaskLoaders as they solve a lot of problems that are inherent to AsyncTask


IntentService


This is the defacto choice for long running processing on Android, a good example would be to upload or download large files. The upload and download may continue even if the user exits the app and you certainly do not want to block the user from being able to use the app while these tasks are going on.


JobScheduler


Effectively, you have to create a Service and create a job using JobInfo.Builder that specifies your criteria for when to run the service.


RxJava


Library for composing asynchronous and event-based programs by using observable sequences.


Coroutines (Kotlin)


The main gist of it is, it makes asynchronous code looks so much like synchronous


Read more here, here, here, here


New Thread and AsyncTask solutions have been explained already.


AsyncTask should ideally be used for short operations. Normal Thread is not preferable for Android. 


Have a look at alternate solution using HandlerThread and Handler


HandlerThread


Handy class for starting a new thread that has a looper. The looper can then be used to create handler classes. Note that start() must still be called.


Handler:


A Handler allows you to send and process Message and Runnable objects associated with a thread's MessageQueue. Each Handler instance is associated with a single thread and that thread's message queue. When you create a new Handler, it is bound to the thread / message queue of the thread that is creating it -- from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue.


Solution:


Create HandlerThread


Call start() on HandlerThread


Create Handler by getting Looper from HanlerThread


Embed your Network operation related code in Runnable object


Submit Runnable task to Handler


Sample code snippet, which address  NetworkOnMainThreadException


Pros of using this approach:


Although above there is a huge solution pool, no one mentioned com.koushikdutta.ion: https://github.com/koush/ion


It's also asynchronous and very simple to use:


There is another very convenient way for tackling this issue - use rxJava's concurrency capabilities. You can execute any task in background and post results to main thread in a very convenient way, so these results will be handed to processing chain.


The first verified answer advice is to use AsynTask. Yes, this is a solution, but it is obsolete nowadays, because there are new tools around.


The getUrl method provides the URL address, and it will be executed on the main thread.


makeCallParseResponse(..) - does actual work


processResponse(..) - will handle result on main thread.


The code for asynchronous execution will look like:


Compared to AsyncTask, this method allow to switch schedulers an arbitrary number of times (say, fetch data on one scheduler and process those data on another (say, Scheduler.computation()). You can also define you own schedulers.


In order to use this library, include following lines into you build.gradle file:


The last dependency includes support for the .mainThread() scheduler.


There is an excellent ebook for rx-java.


RxAndroid is another better alternative to this problem and it saves us from hassles of creating threads and then posting results on Android UI thread.
We just need to specify threads on which tasks need to be executed and everything is handled internally.


By specifiying (Schedulers.io()),RxAndroid will run getFavoriteMusicShows()  on a different thread.


By using AndroidSchedulers.mainThread() we want to observe this Observable on the UI thread, i.e. we want our onNext() callback to be called on the UI thread


The main thread is the UI thread, and you cannot do an operation in the main thread which may block the user interaction. You can solve this in two ways:


Force to do the task in the main thread like this


Or create a simple handler and update the main thread if you want.


And to stop the thread use:


For more information check this out: Painless threading


This works. Just made Dr.Luiji's answer a little simpler.


On Android, network operations cannot be run on the main thread. You can use Thread, AsyncTask (short-running tasks), Service (long-running tasks) to do network operations.




Want to improve this question? Update the question so it can be answered with facts and citations by editing this post.
                


Closed 5 years ago.


I'm developing an application which displays images, and plays sounds from a database. I'm trying to decide whether or not to use a separate JFrame to add images to the database from the GUI. 


I'm just wondering whether it is good practice to use multiple JFrame windows?


I'm just wondering whether it is good practice to use multiple JFrames?


Bad (bad, bad) practice.  


There are any number of ways of displaying many elements in one GUI, e.g.:


But if those strategies do not work for a particular use-case, try the following.  Establish a single main JFrame, then have JDialog or JOptionPane instances appear for the rest of the free-floating elements, using the frame as the parent for the dialogs.


In this case where the multiple elements are images, it would be better to use either of the following instead:





The multiple JFrame approach has been something I've implemented since I began programming Swing apps. For the most part, I did it in the beginning because I didn't know any better. However, as I matured in my experience and knowledge as a developer and as began to read and absorb the opinions of so many more experienced Java devs online, I made an attempt to shift away from the multiple JFrame approach (both in current projects and future projects) only to be met with... get this... resistance from my clients! As I began implementing modal dialogs to control "child" windows and JInternalFrames for separate components, my clients began to complain! I was quite surprised, as I was doing what I thought was best-practice! But, as they say, "A happy wife is a happy life." Same goes for your clients. Of course, I am a contractor so my end-users have direct access to me, the developer, which is obviously not a common scenario.


So, I'm going to explain the benefits of the multiple JFrame approach, as well as myth-bust some of the cons that others have presented.


I've written a lot and I feel like I could write more. Anyways, I hope I don't get down-voted simply because it's an unpopular opinion. The question is clearly a valuable one and I hope I've provided a valuable answer, even if it isn't the common opinion.


A great example of multiple frames/single document per frame (SDI) vs single frame/multiple documents per frame (MDI) is Microsoft Excel. Some of MDI benefits:


SDI (Single-Document Interface, i.e., every window can only have a single document):





MDI (Multiple-Document Interface, i.e., every window can have multiple documents):





I'd like to counter the "not user friendly" argument with an example that I have just been involved with.


In our application we have a main window where the users run various 'programs' as separate tabs. As much as possible we have tried to keep our application to this single window.


One of the 'programs' they run presents a list of reports that have been generated by the system, and the user can click on an icon on each line to pop open a report viewer dialog. This viewer is showing the equivalent of the portrait/landscape A4 page(s) of the report, so the users like this window to be quite big, almost filling their screens.


A few months ago we started getting requests from our customers to make these report viewer windows modeless, so that they could have multiple reports open at the same time.


For some time I resisted this request as I did not think this was a good solution. However, my mind was changed when I found out how the users were getting around this 'deficiency' of our system.


They were opening a viewer, using the 'Save As' facility to save the report as a PDF to a specific directory, using Acrobat Reader to open the PDF file, and then they would do the same with the next report. They would have multiple Acrobat Readers running with the various report outputs that they wanted to look at.


So I relented and made the viewer modeless. This means that each viewer has a task-bar icon.


When the latest version was released to them last week, the overwhelming response from them is that they LOVE it. It's been one of our most popular recent enhancements to the system.


So you go ahead and tell your users that what they want is bad, but ultimately it won't do you any favours.


SOME NOTES:


Make an jInternalFrame into main frame and make it invisible. Then you can use it for further events.


It's been a while since the last time i touch swing but in general is a bad practice to do this. Some of the main disadvantages that comes to mind: 


It's more expensive: you will have to allocate way more resources to draw a JFrame that other kind of window container, such as Dialog or JInternalFrame.


Not user friendly: It is not easy to navigate into a bunch of JFrame stuck together, it will look like your application is a set of applications inconsistent and poorly design.


It's easy to use JInternalFrame This is kind of retorical, now it's way easier and other people smarter ( or with more spare time) than us have already think through the Desktop and JInternalFrame pattern, so I would recommend to use it.


Bad practice definitely. One reason is that it is not very 'user-friendly' for the fact that every JFrame shows a new taskbar icon. Controlling multiple JFrames will have you ripping your hair out.


Personally, I would use ONE JFrame for your kind of application. Methods of displaying multiple things is up to you, there are many. Canvases, JInternalFrame, CardLayout, even JPanels possibly.


Multiple JFrame objects = Pain, trouble, and problems.


I think using multiple Jframes is not a good idea.


Instead we can use JPanels more than one or more JPanel in the same JFrame.


Also we can switch between this JPanels. So it gives us freedom to display more than on thing in the JFrame.


For each JPanel we can design different things and all this JPanel can be displayed on the single JFrameone at a time.


To switch between this JPanels use JMenuBar with JMenuItems for each JPanelor 'JButtonfor eachJPanel`.


More than one JFrame is not a good practice, but there is nothing wrong if we want more than one JFrame.  


But its better to change one JFrame for our different needs rather than having multiple JFrames.


If the frames are going to be the same size, why not create the frame and pass the frame then as a reference to it instead. 


When you have passed the frame you can then decide how to populate it. It would be like having a method for calculating the average of a set of figures. Would you create the method over and over again? 


It is not a good practice but even though you wish to use it you can use the singleton pattern as its good. I have used the singleton patterns in most of my project its good.



The Java Language Specification defines a raw type as follows:


A raw type is defined to be one of:


The reference type that is formed by taking the name of a generic type declaration without an accompanying type argument list.


An array type whose element type is a raw type.


A non-static member type of a raw type R that is not inherited from a superclass or superinterface of R.


Here's an example to illustrate:


Here, MyType<E> is a parameterized type (JLS 4.5). It is common to colloquially refer to this type as simply MyType for short, but technically the name is MyType<E>.


mt has a raw type (and generates a compilation warning) by the first bullet point in the above definition; inn also has a raw type by the third bullet point.


MyType.Nested is not a parameterized type, even though it's a member type of a parameterized type MyType<E>, because it's static.


mt1, and mt2 are both declared with actual type parameters, so they're not raw types.


Essentially, raw types behaves just like they were before generics were introduced. That is, the following is entirely legal at compile-time.


The above code runs just fine, but suppose you also have the following:


Now we run into trouble at run-time, because names contains something that isn't an instanceof String.


Presumably, if you want names to contain only String, you could perhaps still use a raw type and manually check every add yourself, and then manually cast to String every item from names. Even better, though is NOT to use a raw type and let the compiler do all the work for you, harnessing the power of Java generics.


Of course, if you DO want names to allow a Boolean, then you can declare it as List<Object> names, and the above code would compile.


The following is a quote from Effective Java 2nd Edition, Item 23: Don't use raw types in new code:


Just what is the difference between the raw type List and the parameterized type List<Object>? Loosely speaking, the former has opted out generic type checking, while the latter explicitly told the compiler that it is capable of holding objects of any type. While you can pass a List<String> to a parameter of type List, you can't pass it to a parameter of type List<Object>. There are subtyping rules for generics, and List<String> is a subtype of the raw type List, but not of the parameterized type List<Object>. As a consequence, you lose type safety if you use raw type like List, but not if you use a parameterized type like List<Object>.


To illustrate the point, consider the following method which takes a List<Object> and appends a new Object().


Generics in Java are invariant. A List<String> is not a List<Object>, so the following would generate a compiler warning:


If you had declared appendNewObject to take a raw type List as parameter, then this would compile, and you'd therefore lose the type safety that you get from generics.


List<Object>, List<String>, etc are all List<?>, so it may be tempting to just say that they're just List instead. However, there is a major difference: since a List<E> defines only add(E), you can't add just any arbitrary object to a List<?>. On the other hand, since the raw type List does not have type safety, you can add just about anything to a List.


Consider the following variation of the previous snippet:


The compiler did a wonderful job of protecting you from potentially violating the type invariance of the List<?>! If you had declared the parameter as the raw type List list, then the code would compile, and you'd violate the type invariant of List<String> names.


Back to JLS 4.8:


It is possible to use as a type the erasure of a parameterized type or the erasure of an array type whose element type is a parameterized type. Such a type is called a raw type.


[...]


The superclasses (respectively, superinterfaces) of a raw type are the erasures of the superclasses (superinterfaces) of any of the parameterizations of the generic type.


The type of a constructor, instance method, or non-static field of a raw type C that is not inherited from its superclasses or superinterfaces is the raw type that corresponds to the erasure of its type in the generic declaration corresponding to C.


In simpler terms, when a raw type is used, the constructors, instance methods and non-static fields are also erased.


Take the following example:


When we use the raw MyType, getNames becomes erased as well, so that it returns a raw List!


JLS 4.6 continues to explain the following:


Type erasure also maps the signature of a constructor or method to a signature that has no parameterized types or type variables. The erasure of a constructor or method signature s is a signature consisting of the same name as s and the erasures of all the formal parameter types given in s.


The return type of a method and the type parameters of a generic method or constructor also undergo erasure if the method or constructor's signature is erased.


The erasure of the signature of a generic method has no type parameters.


The following bug report contains some thoughts from Maurizio Cimadamore, a compiler dev, and Alex Buckley, one of the authors of the JLS, on why this sort of behavior ought to occur: https://bugs.openjdk.java.net/browse/JDK-6400189. (In short, it makes the specification simpler.)


Here's another quote from JLS 4.8:


The use of raw types is allowed only as a concession to compatibility of legacy code. The use of raw types in code written after the introduction of genericity into the Java programming language is strongly discouraged. It is possible that future versions of the Java programming language will disallow the use of raw types.


Effective Java 2nd Edition also has this to add:


Given that you shouldn't use raw types, why did the language designers allow them? To provide compatibility.


The Java platform was about to enter its second decade when generics were introduced, and there was an enormous amount of Java code in existence that did not use generics. It was deemed critical that all this code remains legal and interoperable with new code that does use generics. It had to be legal to pass instances of parameterized types to methods that were designed for use with ordinary types, and vice versa. This requirement, known as migration compatibility, drove the decision to support raw types.


In summary, raw types should NEVER be used in new code. You should always use parameterized types.


Unfortunately, because Java generics are non-reified, there are two exceptions where raw types must be used in new code:


What are raw types in Java, and why do I often hear that they shouldn't be used in new code?


Raw-types are ancient history of the Java language. In the beginning there were Collections and they held Objects nothing more and nothing less. Every operation on Collections required casts from Object to the desired type.


While this worked most of the time, errors did happen


The old typeless collections could not enforce type-safety so the programmer had to remember what he stored within a collection.
Generics where invented to get around this limitation, the developer would declare the stored type once and the compiler would do it instead.


For Comparison:


More complex the Compareable interface:


Note that it is impossible to implement the CompareAble interface with compareTo(MyCompareAble) with raw types.
Why you should not use them:


What the compiler does:
Generics are backward compatible, they use the same java classes as the raw types do. The magic happens mostly at compile time.


Will be compiled as:


This is the same code you would write if you used the raw types directly. Thought I'm not sure what happens with the CompareAble interface, I guess that it creates two compareTo functions, one taking a MyCompareAble and the other taking an Object and passing it to the first after casting it.


What are the alternatives to raw types: Use generics


A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:


To create a parameterized type of Box<T>, you supply an actual type argument for the formal type parameter T:


If the actual type argument is omitted, you create a raw type of Box<T>:


Therefore, Box is the raw type of the generic type Box<T>. However, a non-generic class or interface type is not a raw type.


Raw types show up in legacy code because lots of API classes (such as the Collections classes) were not generic prior to JDK 5.0. When using raw types, you essentially get pre-generics behavior â€” a Box gives you Objects. For backward compatibility, assigning a parameterized type to its raw type is allowed:


But if you assign a raw type to a parameterized type, you get a warning:


You also get a warning if you use a raw type to invoke generic methods defined in the corresponding generic type:


The warning shows that raw types bypass generic type checks, deferring the catch of unsafe code to runtime. Therefore, you should avoid using raw types.


The Type Erasure section has more information on how the Java compiler uses raw types.


As mentioned previously, when mixing legacy code with generic code, you may encounter warning messages similar to the following:


Note: Example.java uses unchecked or unsafe operations.


Note: Recompile with -Xlint:unchecked for details.


This can happen when using an older API that operates on raw types, as shown in the following example:


The term "unchecked" means that the compiler does not have enough type information to perform all type checks necessary to ensure type safety. The "unchecked" warning is disabled, by default, though the compiler gives a hint. To see all "unchecked" warnings, recompile with -Xlint:unchecked.


Recompiling the previous example with -Xlint:unchecked reveals the following additional information:


To completely disable unchecked warnings, use the -Xlint:-unchecked flag. The @SuppressWarnings("unchecked") annotation suppresses unchecked warnings. If you are unfamiliar with the @SuppressWarnings syntax, see Annotations.


Original source: Java Tutorials


A "raw" type in Java is a class which is non-generic and deals with "raw" Objects, rather than type-safe generic type parameters.


For example, before Java generics was available, you would use a collection class like this:


When you add your object to the list, it doesn't care what type of object it is, and when you get it from the list, you have to explicitly cast it to the type you are expecting.


Using generics, you remove the "unknown" factor, because you must explicitly specify which type of objects can go in the list:


Notice that with generics you don't have to cast the object coming from the get call, the collection is pre-defined to only work with MyObject.  This very fact is the main driving factor for generics.  It changes a source of runtime errors into something that can be checked at compile time.


You should specify the type-parameter. 


The warning advises that types that are defined to support generics should be parameterized, rather than using their raw form.


List is defined to support generics: public class List<E>. This allows many type-safe operations, that are checked compile-time.


What is a raw type and why do I often hear that they shouldn't be used in new code?


A "raw type" is the use of a generic class without specifying a type argument(s) for its parameterized type(s), e.g. using List instead of List<String>. When generics were introduced into Java, several classes were updated to use generics.  Using these class as a "raw type" (without specifying a type argument) allowed legacy code to still compile.


"Raw types" are used for backwards compatibility. Their use in new code is not recommended because using the generic class with a type argument allows for stronger typing, which in turn may improve code understandability and lead to catching potential problems earlier.


What is the alternative if we can't use raw types, and how is it better?


The preferred alternative is to use generic classes as intended - with a suitable type argument (e.g. List<String>). This allows the programmer to specify types more specifically, conveys more meaning to future maintainers about the intended use of a variable or data structure, and it allows compiler to enforce better type-safety.  These advantages together may improve code quality and help prevent the introduction of some coding errors.


For example, for a method where the programmer wants to ensure a List variable called 'names' contains only Strings:


Here I am Considering multiple cases  through which you can clearify  the concept


ArrayList<String> arr it is a ArrayList reference variable with type String which reference to a ArralyList Object of Type String. It means it can hold only String type Object.


It is a Strict to String not  a Raw Type so, It will never raise an warning .


In this case ArrayList<String> arr is a strict type but your Object new ArrayList(); is a raw type. 


here arr is a Strict type. So, It will raise compile time error when adding a integer.


Warning :- A Raw Type Object is referenced to a Strict type Referenced Variable of ArrayList.


In this case ArrayList arr is a raw type but your Object new ArrayList<String>(); is a Strict type. 


It will add any type of Object into it because arr is a Raw Type.


Warning :- A Strict Type Object is referenced to a raw type referenced Variable.


The compiler wants you to write this:


because otherwise, you could add any type you like into list, making the instantiation as new ArrayList<String>() pointless. Java generics are a compile-time feature only, so an object created with new ArrayList<String>() will happily accept Integer or JFrame elements if assigned to a reference of the "raw type" List - the object itself knows nothing about what types it's supposed to contain, only the compiler does.


A raw-type is the a lack of a type parameter when using a generic type.


Raw-type should not be used because it could cause runtime errors, like inserting a double into what was supposed to be a Set of ints.


When retrieving the stuff from the Set, you don't know what is coming out. Let's assume that you expect it to be all ints, you are casting it to Integer; exception at runtime when the double 3.45 comes along.


With a type parameter added to your Set, you will get a compile error at once. This preemptive error lets you fix the problem before something blows up during runtime (thus saving on time and effort).


Here's another case where raw types will bite you:


As was mentioned in the accepted answer, you lose all support for generics within the code of the raw type. Every type parameter is converted to its erasure (which in the above example is just Object).


What is saying is that your list is a List of unespecified objects. That is that Java does not know what kind of objects are inside the list. Then when you want to iterate the list you have to cast every element, to be able to access the properties of that element (in this case, String).


In general is a better idea to parametrize the collections, so you don't have conversion problems, you will only be able to add elements of the parametrized type and your editor will offer you the appropiate methods to select.


tutorial page.  


A raw type is the name of a generic class or interface without any type arguments. For example, given the generic Box class:  


To create a parameterized type of Box, you supply an actual type argument for the formal type parameter T:  


If the actual type argument is omitted, you create a raw type of Box:  


Avoid raw types


Raw types refer to using a generic type without specifying a type parameter.


For example, 


A list is a raw type, while List<String> is a parameterized type.


When generics were introduced in JDK 1.5, raw types were retained only to maintain backwards compatibility with older versions of Java. Although using raw types is still possible,


They should be avoided:


They are less expressive, and don't self-document in the same way as parameterized types
Example 


For reference: https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html


I found this page after doing some sample exercises and having the exact same puzzlement.


============== I went from this code as provide by the sample ===============


====================== To This code ========================


===============================================================================


It may be safer but took 4  hours to demuddle the philosophy...


Raw types are fine when they express what you want to express.


For example, a deserialisation function might return a List, but it doesn't know the list's element type. So List is the appropriate return type here.



How do you write (and run) a correct micro-benchmark in Java?


I'm looking for some code samples and comments illustrating various things to think about.


Example: Should the benchmark measure time/iteration or iterations/time, and why?


Related: Is stopwatch benchmarking acceptable?


Tips about writing micro benchmarks from the creators of Java HotSpot:


Rule 0: Read a reputable paper on JVMs and micro-benchmarking. A good one is Brian Goetz, 2005. Do not expect too much from micro-benchmarks; they measure only a limited range of JVM performance characteristics.


Rule 1: Always include a warmup phase which runs your test kernel all the way through, enough to trigger all initializations and compilations before timing phase(s). (Fewer iterations is OK on the warmup phase. The rule of thumb is several tens of thousands of inner loop iterations.)


Rule 2: Always run with -XX:+PrintCompilation, -verbose:gc, etc., so you can verify that the compiler and other parts of the JVM are not doing unexpected work during your timing phase.


Rule 2.1: Print messages at the beginning and end of timing and warmup phases, so you can verify that there is no output from Rule 2 during the timing phase.


Rule 3: Be aware of the difference between -client and -server, and OSR and regular compilations. The -XX:+PrintCompilation flag reports OSR compilations with an at-sign to denote the non-initial entry point, for example: Trouble$1::run @ 2 (41 bytes). Prefer server to client, and regular to OSR, if you are after best performance.


Rule 4: Be aware of initialization effects. Do not print for the first time during your timing phase, since printing loads and initializes classes. Do not load new classes outside of the warmup phase (or final reporting phase), unless you are testing class loading specifically (and in that case load only the test classes). Rule 2 is your first line of defense against such effects.


Rule 5: Be aware of deoptimization and recompilation effects. Do not take any code path for the first time in the timing phase, because the compiler may junk and recompile the code, based on an earlier optimistic assumption that the path was not going to be used at all. Rule 2 is your first line of defense against such effects.


Rule 6: Use appropriate tools to read the compiler's mind, and expect to be surprised by the code it produces. Inspect the code yourself before forming theories about what makes something faster or slower.


Rule 7: Reduce noise in your measurements. Run your benchmark on a quiet machine, and run it several times, discarding outliers. Use -Xbatch to serialize the compiler with the application, and consider setting -XX:CICompilerCount=1 to prevent the compiler from running in parallel with itself. Try your best to reduce GC overhead, set Xmx(large enough) equals Xms and use UseEpsilonGC if it is available.


Rule 8: Use a library for your benchmark as it is probably more efficient and was already debugged for this sole purpose. Such as JMH, Caliper or Bill and Paul's Excellent UCSD Benchmarks for Java.  


I know this question has been marked as answered but I wanted to mention two libraries that help us to write micro benchmarks


Caliper from Google


Getting started tutorials


JMH from OpenJDK


Getting started tutorials


Important things for Java benchmarks are:


I'm just in the process of blogging about the design of a benchmarking framework in .NET. I've got a couple of earlier posts which may be able to give you some ideas - not everything will be appropriate, of course, but some of it may be.


jmh is a recent addition to OpenJDK and has been written by some performance engineers from Oracle. Certainly worth a look.


The jmh is a Java harness for building, running, and analysing nano/micro/macro benchmarks written in Java and other languages targetting the JVM.


Very interesting pieces of information buried in the sample tests comments.


See also:


Should the benchmark measure time/iteration or iterations/time, and why?


It depends on what you are trying to test.  


If you are interested in latency, use time/iteration and if you are interested in throughput, use iterations/time.


If you are trying to compare two algorithms, do at least two benchmarks for each, alternating the order.  i.e.:


I have found some noticeable differences (5-10% sometimes) in the runtime of the same algorithm in different passes..


Also, make sure that n is very large, so that the runtime of each loop is at the very least 10 seconds or so.  The more iterations, the more significant figures in your benchmark time and the more reliable that data is.


Make sure you somehow use results which are computed in benchmarked code. Otherwise your code can be optimized away.


There are many possible pitfalls for writing micro-benchmarks in Java.


First: You have to calculate with all sorts of events that take time more or less random: Garbage collection, caching effects (of OS for files and of CPU for memory), IO etc.


Second: You cannot trust the accuracy of the measured times for very short intervals.


Third: The JVM optimizes your code while executing. So different runs in the same JVM-instance will become faster and faster.


My recommendations: Make your benchmark run some seconds, that is more reliable than a runtime over milliseconds. Warm up the JVM (means running the benchmark at least once without measuring, that the JVM can run optimizations). And run your benchmark multiple times (maybe 5 times) and take the median-value. Run every micro-benchmark in a new JVM-instance (call for every benchmark new Java) otherwise optimization effects of the JVM can influence later running tests. Don't execute things, that aren't executed in the warmup-phase (as this could trigger class-load and recompilation).


It should also be noted that it might also be important to analyze the results of the micro benchmark when comparing different implementations. Therefore a significance test should be made.


This is because implementation A might be faster during most of the runs of the benchmark than implementation B. But A might also have a higher spread, so the measured performance benefit of A won't be of any significance when compared with B.


So it is also important to write and run a micro benchmark correctly, but also to analyze it correctly.


To add to the other excellent advice, I'd also be mindful of the following:


For some CPUs (e.g. Intel Core i5 range with TurboBoost), the temperature (and number of cores currently being used, as well as thier utilisation percent) affects the clock speed. Since CPUs are dynamically clocked, this can affect your results. For example, if you have a single-threaded application, the maximum clock speed (with TurboBoost) is higher than for an application using all cores. This can therefore interfere with comparisons of single and multi-threaded performance on some systems. Bear in mind that the temperature and volatages also affect how long Turbo frequency is maintained.


Perhaps a more fundamentally important aspect that you have direct control over: make sure you're measuring the right thing! For example, if you're using System.nanoTime() to benchmark a particular bit of code, put the calls to the assignment in places that make sense to avoid measuring things which you aren't interested in. For example, don't do:


Problem is you're not immediately getting the end time when the code has finished. Instead, try the following:


http://opt.sourceforge.net/ Java Micro Benchmark - control tasks required to determine the comparative performance characteristics of the computer system on different platforms. Can be used to guide optimization decisions and to compare different Java implementations.



Please explain the following about "Cannot find symbol", "Cannot resolve symbol" or "Symbol not found" errors:


This question is designed to seed a comprehensive Q&A about these common compilation errors in Java.


Not really. "Cannot find symbol", "Cannot resolve symbol" and "Symbol not found" all mean the same thing.  Different Java compilers use different phraseology.


Firstly, it is a compilation error1.  It means that either there is a problem in your Java source code, or there is a problem in the way that you are compiling it.


Your Java source code consists of the following things:


A "Cannot find symbol" error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.


A "Cannot find symbol" error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.


As a first order, there is only one cause.  The compiler looked in all of the places where the identifier should be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:


For identifiers in general:


For identifiers that should refer to variables:


For identifiers that should be method or field names:


Perhaps you are trying to refer to an inherited method or field that wasn't declared in the parent / ancestor classes or interfaces.


Perhaps you are trying to refer to a method or field that does not exist (i.e. has not been declared) in the type you are using; e.g. "someString".push()2.


Perhaps you are trying to use a method as a field, or vice versa; e.g. "someString".length or someArray.length().


Perhaps you are mistakenly operating on an array rather than array element; e.g.


For identifiers that should be class names:


Perhaps you forgot to import the class.


Perhaps you used "star" imports, but the class isn't defined in any of the packages that you imported.


Perhaps you forgot a new as in:


For cases where type or instance doesn't appear to have the member you were expecting it to have:


The problem is often a combination of the above.  For example, maybe you "star" imported java.io.* and then tried to use the Files class ... which is in java.nio not java.io.  Or maybe you meant to write File ... which is a class in java.io.


Here is an example of how incorrect variable scoping can lead to a "Cannot find symbol" error:


This will give a "Cannot find symbol" error for i in the if statement.  Though we previously declared i, that declaration is only in scope for the for statement and its body.  The reference to i in the if statement cannot see that declaration of i.  It is out of scope.


(An appropriate correction here might be to move the if statement inside the loop, or to declare i before the start of the loop.)


Here is an example that causes puzzlement where a typo leads to a seemingly inexplicable "Cannot find symbol" error:


This will give you a compilation error in the println call saying that i cannot be found.  But (I hear you say) I did declare it!


The problem is the sneaky semicolon ( ; ) before the {.  The Java language syntax defines a semicolon in that context to be an empty statement.  The empty statement then becomes the body of the for loop.  So that code actually means this:


The { ... } block is NOT the body of the for loop, and therefore the previous declaration of i in the for statement is out of scope in the block.


Here is another example of "Cannot find symbol" error that is caused by a typo.


Despite the previous declaration, the tmp in the tmp(...) expression is erroneous.  The compiler will look for a method called tmp, and won't find one.  The previously declared tmp is in the namespace for variables, not the namespace for methods.


In the example I came across, the programmer had actually left out an operator.  What he meant to write was this:


There is another reason why the compiler might not find a symbol if you are compiling from the command line.  You might simply have forgotten to compile or recompile some other class.  For example, if you have classes Foo and Bar where Foo uses Bar.  If you have never compiled Bar and you run javac Foo.java, you are liable to find that the compiler can't find the symbol Bar.  The simple answer is to compile Foo and Bar together; e.g. javac Foo.java Bar.java or javac *.java.  Or better still use a Java build tool; e.g. Ant, Maven, Gradle and so on.


There are some other more obscure causes too ... which I will deal with below.


Generally speaking, you start out by figuring out what caused the compilation error.


Then you think about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.


Note that not every "correction" is correct. Consider this:


Suppose that the compiler says "Cannot find symbol" for j.  There are many ways I could "fix" that:


The point is that you need to understand what your code is trying to do in order to find the right fix.


Here are a couple of cases where the "Cannot find symbol" is seemingly inexplicable ... until you look closer.


Incorrect dependencies: If you are using an IDE or a build tool that manages the build path and project dependencies, you may have made a mistake with the dependencies; e.g. left out a dependency, or selected the wrong version.  If you are using a build tool (Ant, Maven, Gradle, etc), check the project's build file.  If you are using an IDE, check the project's build path configuration.


You are not recompiling:  It sometimes happens that new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable "build process"; e.g. using an IDE, Ant, Maven, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is actually caused by not recompiling the code properly, and the like ...


An earlier build problem:  It is possible that an earlier build failed in a way that gave a JAR file with missing classes.  Such a failure would typically be noticed if you were using a build tool.  However if you are getting JAR files from someone else, you are dependent on them building properly, and noticing errors.  If you suspect this, use tar -tvf to list the contents of the suspect JAR file.


IDE issues: People have reported cases where their IDE gets confused and the compiler in the IDE cannot find a class that exists ... or the reverse situation.


This could happen if the IDE has been configured with the wrong JDK version.


This could happen if the IDE's caches get out of sync with the file system.  There are IDE specific ways to fix that.


This could be an IDE bug.  For instance @Joel Costigliola describes a scenario where Eclipse does not handle a Maven "test" tree correctly: see this answer.


Android issues: When you are programming for Android, and you have "Cannot find symbol" errors related to R, be aware that the R symbols are defined by the context.xml file.  Check that your context.xml file is correct and in the correct place, and that the corresponding R class file has been generated / compiled.  Note that the Java symbols are case sensitive, so the corresponding XML ids are be case sensitive too.


Other symbol errors on Android are likely to be due to previously mention reasons; e.g. missing or incorrect dependencies, incorrect package names, method or fields that don't exist in a particular API version, spelling / typing errors, and so on.


Redefining system classes: I've seen cases where the compiler complains that substring is an unknown symbol in something like the following


It turned out that the programmer had created their own version of String and that his version of the class didn't define a substring methods.


Lesson: Don't define your own classes with the same names as common library classes!


Homoglyphs:  If you use UTF-8 encoding for your source files, it is possible to have identifiers that look the same, but are in fact different because they contain homoglyphs.   See this page for more information.


You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java \uxxxx escapes for other characters.


1 - If, perchance, you do see this in a runtime exception or error message, then either you have configured your IDE to run code with compilation errors, or your application is generating and compiling code .. at runtime.


2 - The three basic principles of Civil Engineering: water doesn't flow uphill, a plank is stronger on its side, and you can't push on a string.


You'll also get this error if you forget a new:


versus


because the call without the new keyword will try and look for a (local) method called String without arguments - and that method signature is likely not defined.


One more example of 'Variable is out of scope'


As I've seen that kind of questions a few times already, maybe one more example to what's illegal even if it might feel okay.


Consider this code:


That's invalid code. Because neither of the variables named message is visible outside of their respective scope - which would be the surrounding brackets {} in this case. 


You might say: "But a variable named message is defined either way - so message is defined after the if". 


But you'd be wrong. 


Java has no free() or delete operators, so it has to rely on tracking variable scope to find out when variables are no longer used (together with references to these variables of cause). 


It's especially bad if you thought you did something good. I've seen this kind of error after "optimizing" code like this:


"Oh, there's duplicated code, let's pull that common line out" -> and there it it.


The  most common way to deal with this kind of scope-trouble would be to pre-assign the else-values to the variable names in the outside scope and then reassign in if:


One way to get this error in Eclipse : 


Result : Eclipse will compile the code, but maven will give "Cannot find symbol".


Underlying cause : Eclipse is using a combined build path for the main and test trees.  Unfortunately, it does not support using different build paths for different parts of an Eclipse project, which is what Maven requires.


Solution : 


"Can not find " means that , compiler who can't find appropriate variable, method ,class etc...if you got that error massage , first of all you want to find code line where get error massage..And then you will able to find which variable , method or class have not define before using it.After confirmation  initialize that variable ,method or class can be used for later require...Consider the following example.


I'll create a demo class and print a name...


Now look at the result..





That error says, "variable name can not find"..Defining and initializing value for 'name' variable  can be abolished that error..Actually like this,


Now look at the new output...





Ok Successfully solved that error..At the same time , if you could get "can not find method " or "can not find class" something , At first,define a class or method and after use that.. 


If you're getting this error in the build somewhere else, while your IDE says everything is perfectly fine, then check that you are using the same Java versions in both places.


For example, Java 7 and Java 8 have different APIs, so calling a non-existent API in an older Java version would cause this error.


I too was getting this error. (for which I googled and I was directed to this page)


Problem: I was calling a static method defined in the class of a project A from a class defined in another project B. 
I was getting the following error:


Solution: I resolved this by first building the project where the method is defined then the project where the method was being called from.


If eclipse Java build path is mapped to 7, 8 and in Project pom.xml Maven properties java.version is mentioned higher Java version(9,10,11, etc..,) than 7,8 you need to update in pom.xml file.


In Eclipse if Java is mapped to Java version 11 and in pom.xml it is mapped to Java version 8. Update Eclipse support to Java 11 by go through below steps in eclipse IDE
Help -> Install New Software -> 


Paste following link http://download.eclipse.org/eclipse/updates/4.9-P-builds at Work With


or


Add (Popup window will open) ->


Name: Java 11 support
Location: http://download.eclipse.org/eclipse/updates/4.9-P-builds


then update Java version in Maven properties of pom.xml file as below


Finally do right click on project Debug as -> Maven clean, Maven build steps


SOLVED


Using IntelliJ


Select Build->Rebuild Project will solve it


There can be various scenarios as people have mentioned above. A couple of things which have helped me resolve this.


If you are using IntelliJ


File -> 'Invalidate Caches/Restart'


OR


The class being referenced was in another project and that dependency was not added to the Gradle build file of my project. So I added the dependency using


compile project(':anotherProject')


and it worked. HTH!


you compiled your code using maven compile and then used maven test to run it worked fine. Now if you changed something in your code and then without compiling you are running it, you will get this error.


Solution: Again compile it and then run test. For me it worked this way.


In my case - I had to perform below operations:


For hints, look closer at the class name name that throws an error and the line number, example:
Compilation failure
[ERROR] \applications\xxxxx.java:[44,30] error: cannot find symbol


One other cause is unsupported method of for java version say jdk7 vs 8.
Check your %JAVA_HOME% 


We got the error in a Java project that is set up as a Gradle multi-project build. It turned out that one of the sub-projects was missing the Gradle Java Library plugin.
This prevented the sub-project's class files from being visible to other projects in the build.


After adding the Java library plugin to the sub-project's build.gradle in the following way, the error went away:



I want to add JTable into JPanel whose layout is null.  JPanel contains other components. I have to add JTable at proper position.


The Java Tutorial has comprehensive information on using layout managers. See the Laying Out Components Within a Container lesson for further details.


One aspect of layouts that is not covered well by the tutorial is that of nested layouts, putting one layout inside another to get complex effects.


The following code puts a variety of components into a frame to demonstrate how to use nested layouts.  All the layouts that are explicitly set are shown as a titled-border for the panel on which they are used.


Notable aspects of the code are:














Don't use a null layout.  Learn to use LayoutManagers:


http://download.oracle.com/javase/tutorial/uiswing/layout/using.html


LayoutManagers allow you to properly handle things window resizing or dynamic component counts.  They might seem intimidating at first, but they are worth the effort to learn.


As I can remember, the null layout means an absolute position so it will be pretty hard you to count the X point for your JTable left upper corner location. But if you just want to have all panel components one by one you can use FlowLayout() manager as


or if you need to fill the panel you should use GridLayout() as...


Good luck


If you are using null layout manager you always need to set the bounds of a component.
That is the problem in your case.


You should do what everyone suggest here and go and use some layout manager believe they save time.
Go and check out the tutorial in @jzd's post.


Enjoy, Boro.


JTable should be added into the JScrollPane which actually should be added into the JPanel.


The JPanel should have some layout manager.


If you don't care about the precision of components size you can use pure BorderLayout and combine it with FlowLayout and GridLayout. if you need precision - use jgoodies FormLayout.


The FormLayout is really tricky one, but you can play a little with WindowBuilder (which is embedded into Eclipse) and a look at the code it generates. It may look complicated but it is just an ignorance.


Good luck. 


First, you should seriously consider other Layout managers, for example the BorderLayoutManager (new JPanel(new BorderLayout())) is a good start. 


Also when designing your dialog, remember that you can and should nest your layouts: one JPanel inside another JPanel (e.g. a GridLayout inside a BorderLayout). Please note: a 'good' dialog should resize properly, so that if the user resizes your Frame, you want to automatically extend your information objects such as your table, and not show large areas of JPanel background. That's something you cannot achieve with a NullLayout.


But there are probably cases - somewhere in this big world - where a NullLayout is just the thing. So here's an example:


When a component have a "null" layout, you have to manage the layout by yourself, that means you have to calculate the dimensions and locations for the children of the component to decide where they are drawn. Quite tedious unless it is absolutely necessary.


If you really want that fine-grained control, maybe try GridBagLayout first before going mudding with the UI arrangement.


You can make use of the following code. To add JTable to JPanel.


Hope this helps.


table model depends on your requirement


Try this.



I'm new to Java EE and I know that something like the following three lines


is an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. What are the alternative JSP 2 lines, and what is this technique called?


The use of scriptlets (those <% %> things) in JSP is indeed highly discouraged since the birth of taglibs (like JSTL) and EL (Expression Language, those ${} things) way back in 2001.


The major disadvantages of scriptlets are:


Sun Oracle itself also recommends in the JSP coding conventions to avoid use of scriptlets whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:


From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help reduce the need for JSP scriptlets in your pages. Pages that use JSTL are, in general, easier to read and maintain. 


...


Where possible, avoid JSP scriptlets whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but de-emphasizes the use of scriptlets).


...


In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, JSP scriptlets should not be used for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called "value objects") returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.


How to replace scriptlets entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:


If you want to invoke the same Java code on every request, less-or-more regardless of the requested page, e.g. checking if a user is logged in, then implement a filter and write code accordingly in doFilter() method. E.g.:


When mapped on an appropriate <url-pattern> covering the JSP pages of interest, then you don't need to copypaste the same piece of code overall JSP pages.


If you want to invoke some Java code to preprocess a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a servlet and write code accordingly in doGet() method. E.g.:


This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <error-page> in web.xml.


If you want to invoke some Java code to postprocess a request, e.g. processing a form submit, then implement a servlet and write code accordingly in doPost() method. E.g.:


This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using ${message} in EL), or just taking to the desired target page in case of success.


If you want to invoke some Java code to control the execution plan and/or the destination of the request and the response, then implement a servlet according to the MVC's Front Controller Pattern. E.g.:


Or just adopt an MVC framework like JSF, Spring MVC, Wicket, etc so that you end up with just a JSP/Facelets page and a JavaBean class without the need for a custom servlet.


If you want to invoke some Java code to control the flow inside a JSP page, then you need to grab an (existing) flow control taglib like JSTL core. E.g. displaying List<Product> in a table:


With XML-style tags which fit nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces ("Where the heck does this closing brace belong to?"). An easy aid is to configure your web application to throw an exception whenever scriptlets are still been used by adding the following piece to web.xml:


In Facelets, the successor of JSP, which is part of the Java EE provided MVC framework JSF, it is already not possible to use scriptlets. This way you're automatically forced to do things "the right way".


If you want to invoke some Java code to access and display "backend" data inside a JSP page, then you need to use EL (Expression Language), those ${} things. E.g. redisplaying submitted input values:


The ${param.foo} displays the outcome of request.getParameter("foo").


If you want to invoke some utility Java code directly in the JSP page (typically public static methods), then you need to define them as EL functions. There's a standard functions taglib in JSTL, but you can also easily create functions yourself. Here's an example how JSTL fn:escapeXml is useful to prevent XSS attacks.


Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in every web application you develop. The problem of scriptlets is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.


As a Safeguard: Disable Scriptlets For Good


As another question is discussing, you can and always should disable scriptlets in your web.xml web application descriptor.


I would always do that in order to prevent any developer adding scriptlets, especially in bigger companies where you will lose overview sooner or later. The web.xml settings look like this:


JSTL offers tags for conditionals, loops, sets, gets, etc. For example:


JSTL works with request attributes - they are most often set in the request by a Servlet, which forwards to the JSP.


I'm not sure if I get this correct.


You should read something about MVC. Spring MVC & Struts 2 are the two most common solutions.


You can use JSTL tags together with EL expressions to avoid intermixing Java and HTML code:


There are also component-based frameworks, such as Wicket, that generate a lot of the HTML for you.


The tags that end up in the HTML are extremely basic and there is virtually no logic that gets mixed in. The result is almost empty-like HTML pages with typical HTML elements. The downside is that there are a lot of components in the Wicket API to learn and some things can be difficult to achieve under those constraints.


In the MVC architectural pattern, JSPs represent the view layer. Embedding Java code in JSPs is considered a bad practice.


You can use JSTL, freeMarker, and velocity with JSP as a "template engine".


The data provider to those tags depends on frameworks that you are dealing with. Struts 2 and WebWork as an implementation for the MVC pattern uses OGNL "very interesting technique to expose Beans properties to JSP".


Experience has shown that JSP's have some shortcomings, one of them being hard to avoid mixing markup with actual code.


If you can, then consider using a specialized technology for what you need to do.  In Java EE 6 there is JSF 2.0, which provides a lot of nice features including gluing Java beans together with JSF pages through the #{bean.method(argument)} approach.


If you simply want to avoid the drawbacks of Java coding in JSP you can do so even with scriplets. Just follow some discipline to have minimal Java in JSP and almost no calculation and logic in the JSP page.


Learn to customize and write your own tags using JSTL


Note that EL is EviL (runtime exceptions and refactoring).


Wicket may be evil too (performance and toilsome for small applications or simple view tier).


This must be added to the web application's web.xml


Create file java2s.tld in the /WEB-INF/


Compile the following code into WEB-INF\classes\com\java2s


Start the server and load the bodyContent.jsp file in the browser:


Wicket is also an alternative which completely separates Java from HTML, so a designer and programmer can work together and on different sets of code with little understanding of each other.


Look at Wicket.


You raised a good question and although you got good answers, I would suggest that you get rid of JSP. It is outdated technology which eventually will die. Use a modern approach, like template engines. You will have very clear separation of business and presentation layers, and certainly no Java code in templates, so you can generate templates directly from web presentation editing software, in most cases leveraging WYSIWYG.


And certainly stay away of filters and pre and post processing, otherwise you may deal with support/debugging difficulties since you always do not know where the variable gets the value.


No matter how much you try to avoid, when you work with other developers, some of them will still prefer scriptlet and then insert the evil code into the project. Therefore, setting up the project at the first sign is very important if you really want to reduce the scriptlet code. There are several techniques to get over this (including several frameworks that other mentioned). However, if you prefer the pure JSP way, then use the JSTL tag file. The nice thing about this is you can also set up master pages for your project, so the other pages can inherit the master pages


Create a master page called base.tag under your WEB-INF/tags with the following content


On this mater page, I created a fragment called "title", so that in the child page, I could insert more codes into this place of the master page. Also, the tag <jsp:doBody/> will be replaced by the content of the child page 


Create child page (child.jsp) in your WebContent folder:


<t:base> is used to specify the master page you want to use (which is base.tag at this moment). All the content inside the tag <jsp:body> here will replace the <jsp:doBody/> on your master page. Your child page can also include any tag lib and you can use it normally like the other mentioned. However, if you use any scriptlet code here (<%= request.getParameter("name") %> ...) and try to run this page, you will get a JasperException because  Scripting elements ( &lt;%!, &lt;jsp:declaration, &lt;%=, &lt;jsp:expression, &lt;%, &lt;jsp:scriptlet ) are disallowed here. Therefore, there is no way other people can include the evil code into the jsp file


Calling this page from your controller:


You can easily call the child.jsp file from your controller. This also works nice with the struts framework


In order to avoid Java code in JSP files, Java now provides tag libraries, like JSTL.


Also, Java has come up with JSF into which you can write all programming structures in the form of tags.


Use JSTL tag libraries in JSP. That will work perfectly.


Just use the JSTL tag and EL expression.


If somebody is really against programming in more languages than one, I suggest GWT. Theoretically, you can avoid all the JavaScript and HTML elements, because Google Toolkit transforms all the client and shared code to JavaScript. You won't have problem with them, so you have a webservice without coding in any other languages. You can even use some default CSS from somewhere as it is given by extensions (smartGWT or Vaadin). You don't need to learn dozens of annotations.


Of course, if you want, you can hack yourself into the depths of the code and inject JavaScript and enrich your HTML page, but really you can avoid it if you want, and the result will be good as it was written in any other frameworks. I it's say worth a try, and the basic GWT is well-documented.


And of course many fellow programmers hereby described or recommended several other solutions. GWT is for people who really don't want to deal with the web part or to minimize it.


A neat idea from the Python world is Template attribute languages; TAL was introduced by Zope (therefore a.k.a. "Zope Page Templates", ZPT) and is a standard, with implementations in PHP, XSLT and Java as well (I have used the Python/Zope and PHP incarnations). In this class of templating languages, one of the above examples could look like this:


The code looks like ordinary HTML (or XHTML) plus some special attributes in an XML namespace; it can be viewed with a browser and safely be tweaked by a designer.


There is support for macros and for internationalisation and localisation as well:


If translations of the content are available, they are used.


I don't know very much about the Java implementation, though.


Using scriptlets in JSPs is not a good practice.


Instead, you can use:


Please refer to: 


Sure, replace <%! counter++; %> by an event producer-consumer architecture, where the business layer is notified about the need to increment the counter, it reacts accordingly, and notifies the presenters so that they update the views. A number of database transactions are involved, since in future we will need to know the new and old value of the counter, who has incremented it and with what purpose in mind. Obviously serialization is involved, since the layers are entirely decoupled. You will be able to increment your counter over RMI, IIOP, SOAP. But only HTML is required, which you don't implement, since it is such a mundane case. Your new goal is to reach 250 increments a second on your new shiny E7, 64GB RAM server.


I have more than 20 years in programming, most of the projects fail before the sextet: Reusability Replaceability OO-ability Debuggability Testability Maintainability is even needed. Other projects, run by people who only cared about functionality, were extremely successful.  Also, stiff object structure, implemented too early in the project, makes the code unable to be adapted to the drastic changes in the specifications (aka agile).


So I consider as procrastination the activity of defining "layers" or redundant data structures either early in the project or when not specifically required.  


Technically, JSP are all converted to Servlets during runtime.


JSP was initially created for the purpose of the decoupling the business logic and the design logic, following the MVC pattern. So JSP is technically all Java code during runtime.


But to answer the question, tag libraries are usually used for applying logic (removing Java code) to JSP pages.


How can I avoid Java code in JSP files?


You can use tab library tags like JSTL in addition to Expression Language (EL). But EL does not work well with JSP. So it's is probably better to drop JSP completely and use Facelets.


Facelets is the first non JSP page declaration language designed for JSF (Java Server Faces) which provided a simpler and more powerful programming model to JSF developers as compare to JSP. It resolves different issues occurs in JSP for web applications development.





Source


If we use the following things in a Java web application, Java code can be eliminated from the foreground of the JSP file.


Use the MVC architecture for a web application


Use JSP Tags


a. Standard Tags


b. Custom Tags


Using Scriptlets is a very old way and not recommended. If you want directly output something in your JSP pages, just use Expression Language (EL)  along with JSTL.


There are also other options, such as using a templating engine such as Velocity, Freemarker, Thymeleaf, etc. But using plain JSP with EL and JSTL serves my purpose most of the time and it also seems the simplest for a beginner.


Also, take note that it is not a best practice to do business logic in the view layer. You should perform your business logic in the service layer,
and pass the output result to your views through a controller.


Use a Backbone.js or AngularJS-like JavaScript framework for UI design
and fetch the data using a REST API. This will remove the Java dependency from the UI completely.


Nothing of that is used anymore, my friend. My advice is to decouple the view (CSS, HTML, JavaScript, etc.) from the server.


In my case, I do my systems handling the view with Angular and any data needed is brought from the server using REST services.


Believe me, this will change the way you design.


JSP 2.0 has a feature called "Tag Files", and you can write tags without external Java code and tld. You need to create a .tag file and put it in WEB-INF\tags. You can even create a directory structure to package your tags.


For example:


Use it like


Also, you can read the tag body easily:


Use it:


The samples are very simple, but you can do lots of complicated tasks here. Please consider you can use other tags (for example: JSTL which has controlling tags like if/forEcah/chosen text manipulation like format/contains/uppercase or even SQL tags select/update), pass all kind parameters, for example Hashmap, access session, request, ... in your tag file too.


Tag File are so easy developed as you did not need to restart the server when changing them, like JSP files. This makes them easy for development.


Even if you use a framework like Struts 2, which have lots of good tags, you may find that having your own tags can reduce your code a lot. You can pass your tag parameters to struts and this way customize your framework tag.


You can use tags not only to avoid Java, but also minimize your HTML codes. I myself try to review HTML code and build tags a lot as soon as I see code duplicates start in my pages.


(Even if you end up using Java in your JSP code, which I hope not, you can encapsulate that code in a tag.)


The good thing about this approach is that your code is also HTML like
  code!


As many answers says, use JSTL or create your own custom tags. Here is a good explanation about creating custom tags.


By using JSTL tags together with EL expressions, you can avoid this. Put the following things in your JSP page:



I have the following JSON text. How can I parse it to get the values of pageName, pagePic, post_id, etc.?


The org.json library is easy to use. Example code below:


You may find more examples from: Parse JSON in Java


Downloadable jar:  http://mvnrepository.com/artifact/org.json/json


For the sake of the example lets assume you have a class Person with just a name.


My personal favourite as to the great JSON serialisation / de-serialisation of objects.


Update


If you want to get a single attribute out you can do it easily with the Google library as well:


If you don't need object de-serialisation but to simply get an attribute, you can try org.json (or look GSON example above!)


If one wants to create Java object from JSON and vice versa, use GSON or JACKSON third party jars etc.


But if one just want to parse a JSON string and get some values, (OR create a JSON string from scratch to send over wire) just use JaveEE jar which contains JsonReader, JsonArray, JsonObject etc. You may want to download the implementation of that spec like javax.json. With these two jars I am able to parse the json and use the values.  


These APIs actually follow the DOM/SAX parsing model of XML.       


quick-json parser is very straightforward, flexible, very fast and customizable. Try it


Features:


It can be used like this:


You could use Google Gson.


Using this library you only need to create a model with the same JSON structure. Then the model is automatically filled in. You have to call your variables as your JSON keys, or use @SerializedName if you want to use different names.


From your example:


Now you can parse using Gson library:


Remember to import the library in the app Gradle file


You can generate model from JSON automatically using online tools like this.


Almost all the answers given requires a full deserialization of the JSON into a Java object before accessing the value in the property of interest. Another alternative, which does not go this route is to use JsonPATH which is like XPath for JSON and allows traversing of JSON objects.


It is a specification and the good folks at JayWay have created a Java implementation for the specification which you can find here: https://github.com/jayway/JsonPath


So basically to use it, add it to your project, eg:


and to use:


etc...


Check the JsonPath specification page for more information on the other ways to transverse JSON.


You can use Jackson libraries, for binding JSON String into POJO (Plain Old Java Object) instances. POJO is simply a class with only private fields and public getter/setter methods. Jackson is going to traverse the methods (using reflection), and maps the JSON object into the POJO instance as the field names of the class fits to the field names of the JSON object.


In your JSON object, which is actually a composite object, the main object consists o two sub-objects. So, our POJO classes should have the same hierarchy. I'll call the whole JSON Object as Page object. Page object consist of a PageInfo object, and a Post object array.


So we have to create three different POJO classes;


The only package I've used is Jackson ObjectMapper, what we do is binding data;


The required dependencies, the jar files is listed below;


Here is the required code;


I've just copied your JSON sample into this file and put it under the project folder.


Use minimal-json which is very fast and easy to use.
You can parse from String obj and Stream.


Sample data:


Parsing:


Creating JSON:


Maven:


I believe the best practice should be to go through the official Java JSON API which are still work in progress.


Since nobody mentioned it yet, here is a beginning of a solution using Nashorn (JavaScript runtime part of Java 8, but deprecated in Java 11).


Solution


Performance comparison


I wrote JSON content containing three arrays of respectively 20, 20 and 100 elements. I only want to get the 100 elements from the third array. I use the following JavaScript function to parse and get my entries.


Running the call a million times using Nashorn takes 7.5~7.8 seconds


org.json takes 20~21 seconds


Jackson takes 6.5~7 seconds


In this case Jackson performs better than Nashorn, which performs much better than org.json.
Nashorn API is harder to use than org.json's or Jackson's. Depending on your requirements Jackson and Nashorn both can be viable solutions.


The below example shows how to read the text in the question, represented as the "jsonText" variable.  This solution uses the Java EE7 javax.json API (which is mentioned in some of the other answers).  The reason I've added it as a separate answer is that the following code shows how to actually access some of the values shown in the question.  An implementation of the javax.json API would be required to make this code run.  The full package for each of the classes required was included as I didn't want to declare "import" statements.


Now, before anyone goes and downvotes this answer because it doesn't use GSON, org.json, Jackson, or any of the other 3rd party frameworks available, it's an example of "required code" per the question to parse the provided text.  I am well aware that adherence to the current standard JSR 353 was not being considered for JDK 9 and as such the JSR 353 spec should be treated the same as any other 3rd party JSON handling implementation.


This blew my mind with how easy it was. You can just pass a String holding your JSON to the constructor of a JSONObject in the default org.json package. 


Done. Drops microphone.
This works with JSONObjects as well. After that, you can just look through your hierarchy of Objects using the get() methods on your objects.


There are many JSON libraries available in Java.


The most notorious ones are: Jackson, GSON, Genson, FastJson and org.json.


There are typically three things one should look at for choosing any library:


Specifically for JSON libraries (and any serialization/deserialization libs), databinding is also usually of interest as it removes the need of writing boiler-plate code to pack/unpack the data.


For 1, see this benchmark: https://github.com/fabienrenaud/java-json-benchmark I did using JMH which compares (jackson, gson, genson, fastjson, org.json, jsonp) performance of serializers and deserializers using stream and databind APIs.
For 2, you can find numerous examples on the Internet. The benchmark above can also be used as a source of examples...


Quick takeaway of the benchmark: Jackson performs 5 to 6 times better than org.json and more than twice better than GSON.


For your particular example, the following code decodes your json with jackson:


Let me know if you have any questions.


In addition to other answers, I recomend this online opensource service jsonschema2pojo.org for quick generating Java classes from json or json schema for GSON, Jackson 1.x or Jackson 2.x. For example, if you have:


The jsonschema2pojo.org for GSON generated:


If you have some Java class(say Message) representing the JSON string(jsonString), you can use Jackson  JSON library with:


and from message object you can fetch any of its attribute.


Gson is easy to learn and implement, what we need to know are following two methods


toJson() – Convert Java object to JSON format


fromJson() – Convert JSON into Java object


`


`


There are many open source libraries present to parse JSON content to an object or just to read JSON values. Your requirement is just to read values and parsing it to custom object. So org.json library is enough in your case.


Use org.json library to parse it and create JsonObject:


Now, use this object to get your values:


You can see a complete example here:


How to parse JSON in Java


Please do something like this:


You can use the Gson Library to parse the JSON string.


You can also loop through the "posts" array as so:


Read the following blog post, JSON in Java.


This post is a little bit old, but still I want to answer you question.


Step 1: Create a POJO class of your data.


Step 2: Now create a object using JSON.


For further reference you can refer to the following link.


Top answers on this page use too simple examples like object with one property (e.g. {name: value}). I think that still simple but real life example can help someone. 


So this is the JSON returned by Google Translate API: 


I want to retrieve the value of "translatedText" attribute e.g. "Arbeit" using Google's Gson.


Two possible approaches: 


Retrieve just one needed attribute


Create Java object from JSON


...


First you need to select an implementation library to do that.


The Java API for JSON Processing (JSR 353) provides portable APIs to parse, generate, transform, and query JSON using object model and streaming APIs. 


The reference implementation is here: https://jsonp.java.net/ 


Here you can find a list of implementations of JSR 353:


What are the API that does implement JSR-353 (JSON)


And to help you decide... I found this article as well:


http://blog.takipi.com/the-ultimate-json-library-json-simple-vs-gson-vs-jackson-vs-json/


If you go for Jackson, here is a good article about conversion between JSON to/from Java using Jackson: https://www.mkyong.com/java/how-to-convert-java-object-to-from-json-jackson/


Hope it helps!


You can use Jayway JsonPath. Below is a GitHub link with source code, pom details and good documentation.


https://github.com/jayway/JsonPath


Please follow the below steps.


Step 1: Add the jayway JSON path dependency in your class path using Maven or download the JAR file and manually add it.


Step 2: Please save your input JSON as a file for this example. In my case I saved your JSON as sampleJson.txt. Note you missed a comma between pageInfo and posts.


Step 3: Read the JSON contents from the above file using bufferedReader and save it as String.


Step 4: Parse your JSON string using jayway JSON parser.


Step 5: Read the details like below.


The output will be:


I have JSON like this:


Java class


Code for converting this JSON to a Java class.


Maven


One can use Apache @Model annotation to create Java model classes representing structure of JSON files and use them to access various elements in the JSON tree. Unlike other solutions this one works completely without reflection and is thus suitable for environments where reflection is impossible or comes with significant overhead.


There is a sample Maven project showing the usage. First of all it defines the structure:


and then it uses the generated RepositoryInfo and Owner classes to parse the provided input stream and pick certain information up while doing that:


That is it! In addition to that here is a live gist showing similar example together with asynchronous network communication.


jsoniter (jsoniterator) is a relatively new and simple json library, designed to be simple and fast. All you need to do to deserialize json data is


where jsonData is a string of json data.


Check out the official website
for more information.


We can use the JSONObject class to convert a JSON string to a JSON object,
and to iterate over the JSON object. Use the following code.


You can use DSM stream parsing library for parsing complex json and XML document. DSM parse data only once and not load all data into memory. 


Let's say we have Page class to deserialize given json data.


Page class


Create a yaml Mapping file.


Use DSM to extract fields.


page variable serialized to json:


DSM is very good for complex json and xml.


You can use JsonNode for a structured tree representation of your JSON string. It's part of the rock solid jackson library which is omnipresent.



Several times I've been criticized for having suggested the use of the following methods:


on Swing components. I don't see any alternative to their use when I want to define proportions between displayed components. I have been told this:


With layouts the answer is always the same: use a suitable
  LayoutManager


I have searched the web a little bit, but I haven't found any comprehensive analysis of the subject. So I have the following questions:


Should I completely avoid the use of those methods?


Yes for application code.


The methods have been defined for a reason. So when should I use them? In which context? For what purposes?


I don't know, personally I think of it as an API design accident. Slightly forced by compound components having special ideas about child sizes. "Slightly", because they should have implemented their needs with a custom LayoutManager.


What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution.)


Some (incomplete, and unfortunately the links are broken due to migration of SwingLabs to java.net) technical reasons are for instance mentioned in the Rules (hehe) or in the link @bendicott found in his/her comment to my answer. Socially, posing tons of work onto your unfortunate fellow who has to maintain the code and has to track down a broken layout.


I don't think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout?


Yes, there are LayoutManagers powerful enough to satisfy a very good approximation to "all layout needs". The big three are JGoodies FormLayout, MigLayout, DesignGridLayout. So no, in practice, you rarely write LayoutManagers except for simple highly specialized environments.


If the answer to 4 is "yes", won't this lead to a proliferation of LayoutManager classes which will become difficult to maintain? 


(The answer to 4 is "no".)


In a situation where I need to define proportions between children of a Component (for example, child 1 should use 10% of space, child 2 40%, child 3 50%), is it possible to achieve that without implementing a custom LayoutManager?


Any of the Big-Three can, can't even GridBag (never bothered to really master, too much trouble for too little power).


A few heuristics:


Don't use set[Preferred|Maximum|Minimum]Size() when you really mean to override get[Preferred|Maximum|Minimum]Size(), as might be done in creating your own component, shown here.


Don't use set[Preferred|Maximum|Minimum]Size() when you could rely on a component's carefully overridden getPreferred|Maximum|Minimum]Size, as shown here and below.


Do use set[Preferred|Maximum|Minimum]Size() to derive post-validate() geometry, as shown below and here.


If a component has no preferred size, e.g. JDesktopPane, you may have to size the container, but any such choice is arbitrary. A comment may help clarify the intent.


Consider alternate or custom layouts when you find that you would have to loop through many components to obtain derived sizes, as mentioned in these comments.





Should I completely avoid the use of those methods?


No, there is no formal evidence to suggest calling or overriding these methods is not allowed. In fact, Oracle says these methods are used for giving size hints: http://docs.oracle.com/javase/tutorial/uiswing/layout/using.html#sizealignment.


They may also be overridden (which is the best practice for Swing) when extending a Swing component (rather than calling the method on the custom component instance)


Most importantly no matter how you specify your component's size, be sure that your component's container uses a layout manager that respects the requested size of the component. 


The methods have been defined for a reason. So when should I use them?
  In which context? For what purposes?


When you need to provide customized size hints to the containers Layout manager so that the component will be laid out well


What exactly are the negative consequences of using those methods? (I
  can only think to add portability between systems with different
  screen resolution).


Many layout managers do not pay attention to a component's requested maximum size. However, BoxLayout and SpringLayout do. Furthermore, GroupLayout provides the ability to set the minimum, preferred or maximum size explicitly, without touching the component.


Make sure that you really need to set the component's exact size. Each Swing component has a different preferred size, depending on the font it uses and the look and feel. Thus having a set size might produce varied looks of the UI on different Systems


sometimes problems can be encountered with GridBagLayout and text fields, wherein if the size of the container is smaller than the preferred size, the minimum size gets used, which can cause text fields to shrink quite substantially.


JFrame does not enforce overriden getMinimumSize() only calling setMinimumSize(..) on its works


I don't think any LayoutManager can exactly satisfy all desired layout
  needs. Do I really need to implement a new LayoutManager for every
  little variation on my layout?


If by implementing you mean using then yes. Not one LayoutManger can handle everything, each LayoutManager has its pros and cons thus each can be used together to produce the final layout.


Reference:


There are a lot of good answers here but I want to add a little more about the reasons why you should normally avoid these (the question just came up again in a duplicate topic):


With few exceptions, if you are using these methods you are probably fine-tuning your GUI to look good on a specific look-and-feel (and with your system-specific settings, e.g. your preferred desktop font, etc.). The methods themselves aren't inherently evil, but the typical reasons for using them are. As soon as you start tuning pixel positions and sizes in a layout you run the risk of your GUI breaking (or at minimum, looking bad), on other platforms.


As an example of this, try changing your application's default look-and-feel. Even just with the options available on your platform, you may be surprised at how poorly the results can be rendered.


So, in the name of keeping your GUI functional and nice-looking on all platforms (remember, one of the major benefits of Java is its cross-platformness), you should rely on layout managers, etc., to automatically adjust the sizes of your components so that it renders correctly outside of your specific development environment.


All that said, you can certainly conceive of situations where these methods are justified. Again, they aren't inherently evil, but their usage is normally a big red flag indicating potential GUI issues. Just make sure you are aware of the high potential for complications if/when you use them, and always try and think if there is another look-and-feel-independent solution to your problems -- more often than not you will find that these methods are not necessary.


By the way, if you find yourself getting frustrated with standard layout managers, there are a lot of good free, open-source third-party ones, for example JGoodies' FormLayout, or MigLayout. Some GUI builders even have built-in support for third-party layout managers -- Eclipse's WindowBuilder GUI editor, for example, ships with support for FormLayout and MigLayout.


If you are having trouble with layouts in Java Swing, then I can highly recommend the JGoodies FormLayout provided freely as part of the Forms freeware library by Karsten Lentzsch here.


This very popular layout manager is extremely flexible, allowing for very polished Java UIs to be developed.


You'll find Karsten's documentation in here, and some rather good documentation from eclipse here.


These methods are poorly understood by most people. You should absolutely not ignore these methods. It is up to the layout manager if they honor these methods. This page has a table that shows which layout managers honor which of those methods:


http://thebadprogrammer.com/swing-layout-manager-sizing/


I have been writing Swing code for 8+ years and the layout managers included in the JDK have always served my needs. I have never needed a 3rd party layout manager to achieve my layouts.


I will say that you shouldn't try to give the layout manager hints with these methods until you are sure you need them. Do your layout without giving any sizing hints (i.e. let the layout manager do its job) and then you can make minor corrections if you need to.


In a situation where I need to define proportions between children of a Component (child 1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom layout manager?


Maybe GridBagLayout would satisfy your needs. Besides that, there's a ton of layout managers on the web, and I bet there's one that fits your requirements.


I am seeing it differenty than the accepted answer.


Never avoid! They're there to express the size constraints of your components to the layout manager. You can avoid using them if you're not using any layout manager and try to manage the visual layout on your own.


Unfortunately, Swing is not coming with reasonable default dimensions. However, instead of setting the dimensions of a component, it is better OOP to descend your own component with reasonable defaults. (In that case you call setXXX in your descendant class.) Alternatively, you can override the getXXX methods for the same effect.


Always. When you create a component, set its realistic min/preferred/max size according to the use of that component. For example, if you have a JTextField for entering country symbols such as UK, its preferred size shall be as wide to fit two chars (with the current font, etc.) but probably it is meaningless to let it grow any bigger. After all, country symbols are two chars.
As opposite, if you have a JTextField for entering e.g. a customer name, it can have a preferred size for like the pixel size for 20 chars, but can grow to bigger if the layout is resized, so set the maximum size to more. At the same time, having a 0px wide JTextField is pointless, so set a realistic minimum size (I would say the pixel size of 2 chars).


(I can only think adding portability between systems with different screen resolution).


No negative consequences. These are hints for the layout manager.


Do I really need to implement a new LayoutManager for every little variation on my layout ?


No, definitely not. The usual approach is to cascade different basic layoutmanagers such as horizontal and vertical layout.


For example, the layout below:


is having two parts. The left and right parts are a horizontal layout. The right part is a JPanel added to the horizontal layout, and this JPanel is having a vertical layout which lays out the buttons vertically.


Of course, this can grow tricky with a real life layout. Therefore grid-based layout managers such as MigLayout are much better if you're about to develop anything serious.


No, you definitely shall not develop layout managers, unless you need something very special.


between children of a Component (eg, child1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom LayoutManager?


Basically, once the preferred sizes are set right, you may not want to do anything in percentage. Simply, because percentages are pointless (e.g. it is pointless to have a JTextField 10% of the window size - since one can shrink the window so that JTextField becomes 0px wide, or can expand the window so that the JTextField is across two displays on a multi-display setup).


But, may times you may use the percentages to control sizes of bigger building blocks of your gui (panels, for example).


You can use JSplitPane where you can pre-set the ratio of the two sides. Or, you can use MigLayout which allows you to set such constraints in percentage, pixels, and other units.


Should I completely avoid the use of those methods?
I wouldn't say "avoid" them. I'd say that if you think you need them, you're probably doing something wrong. Component sizes are determined in context. For example, Text component sizes are determined by the number of rows and columns you specify, combined with the font you may have chosen. Your button and label size will be the size of the graphic, if you set one, or the space needed to display the text you set. Each component has a natural size, and the layout managers will use those to lay everything out without you needing to specify sizes. The main exception is the JScrollPane, which has a size independent of whatever it contains. For those, I will sometimes call setSize(), and let that size determine the initial window size, by calling JFrame.pack(). Usually, I will let the window size determine the JScrollPane size. The user will determine the size of the window. Many layout managers ignore the sizes you set anyway, so they often don't do much good.


The methods have been defined for a reason. So when should I use them? In which context? For what purposes?
I believe they were added to provide hints to the layout managers. They may have been written for historical reasons, because layout managers were new, and people didn't fully trust them. I know a few developers who avoided layout managers and placed everything manually, just because they didn't want to bother with learning a new paradigm. It's a terrible idea.


What exactly are the negative consequences of using those methods? (I can only think adding portability between systems with different screen resolution).
They're ineffective, and they produce bad layouts, with objects getting squeezed or stretched to non-natural sizes. And the layouts will be brittle. Changes to the window size will sometimes break the layout and put things in the wrong places.


I don't think any LayoutManager can exactly satisfy all desired layout needs. Do I really need to implement a new LayoutManager for every little variation on my layout ? You shouldn't "implement" a new LayoutManager. You should instantiate existing ones. I often use several layout managers in a single window. Each JPanel will have its own layout manager. Some people balk at nested layouts, because they're hard to maintain. When I use them, I give each one its own creation method to make it easier to see what each one does. But I never "implement" a layout manager. I just instantiate them. 


If the answer to 4 is "yes", won't this lead to a proliferation of LayoutManager classes which will become difficult to maintain?
If you're implementing new layout manager classes for slight variations in layout, you're using them wrong. If you're just implementing new layout managers, you're probably doing something wrong. The only time I've extended a LayoutManager class, it was to add a zoom slider to a JScrollPane.


In a situation where I need to define proportions between children of a Component (eg, child1 should use 10% of space, child2 40% ,child3 50%), is it possible to achieve that without implementing a custom LayoutManager?
The JSplitPane has a way of specifying the percentage each component should get. The divider is movable by default, but you can turn that off if you want. I don't use that feature much. I usually have some components that take up a set size, and the rest of the space is taken up by a scroll pane. The scroll pane size will adjust with the window size. If you have two scroll panes side by side, you can put them in a JSplitPane and specify the percentage of new space given to each one as the user expands and contracts the windows.



A GUI with no white space appears 'crowded'.  How can I provide white space without resorting to explicitly setting the position or size of components?­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­


Using various LayoutManagers one can provide spacing between various components. 


Getter and setter methods


For Horizontal Spacing : BorderLayout.getHgap() and BorderLayout.setHgap(int hgap)


For Vertical Spacing : BorderLayout.getVgap() and BorderLayout.setVgap()


Getter and setter methods


For Horizontal Spacing : FlowLayout.getHgap() and FlowLayout.setHgap(int hgap)


For Vertical Spacing : FlowLayout.getVgap() and FlowLayout.setVgap()


Getter and setter methods


For Horizontal Spacing : GridLayout.getHgap() and GridLayout.setHgap(int hgap)


For Vertical Spacing : GridLayout.getVgap() and GridLayout.setVgap()


GridBagConstraints.insets


CardLayout(int hGap, int vGap)





There are a number of ways in a Swing GUI to provide a separation between components, and white space around components:


But more generally, look to:


Here is an example of using the layout separator hGap & vGap values & borders (specifically an EmptyBorder) to provide 'white' (actually shown as red to make it very obvious) space.  Adjust the spinners to see the result.








When you use BoxLayout, Box.createVerticalGlue() method can help you to make some white space.


Another method is BorderFactory.createEmptyBorder(int top, int left, int bottom, int right). It can help you to make some white space around component.


Thanks for Andrew Thompson's remind.I've revised BoxLayout in recent days and I     find that Box.createVerticalGlue() can add some white space depend on the panel's size and you can not set the explicit pixel value of the length of white space.But Box.createVerticalStrut() can do that.  Here is a MCTaRE and show the    effect of those two methods.





Box.createHorizontalGlue() and Box.createHorizontalStrut(int height) can be used too. Besides, Box.createRigidArea(Dimension d) has the ability too create white space too.


MigLayout has multiple ways of creating space. (A space is called a gap in this layout.)
Gaps can be created at the highest level with layout constraints, it is possible to
create gaps between rows and column and gaps can be also set between individual 
components with component constraints. There are also specific gaps around the borders
of a container called insets which have their own specific keyword to be set.


The following example creates all these kinds of gaps:


We have four panels in the layout. Each of this panels has a MigLayout manager.


This line creates container insets and vertical gaps between panels.


Here we apply gaps for the whole grid structure and also set container gaps.


This line creates gaps between columns.


Row gaps are defined with this code.


Finally, it is possible to create gaps between individual components.





JGoodies FormLayout. 


Author Karsten Lentzsch has a collection of presentations on UI design.   In particular this PDF speaks to the need for aesthetic whitespace.  Adding meaningful space while also paying attention to clutter separates the wheat from the chaff.


Whenever I have this issue, I just use JPanels. For example in a GridLayout:


Hope this helped :)



In Java, arrays don't override toString(), so if you try to print one directly, you get the className + '@' + the hex of the hashCode of the array, as defined by Object.toString():


But usually, we'd actually want something more like [1, 2, 3, 4, 5]. What's the simplest way of doing that? Here are some example inputs and outputs:


Since Java 5 you can import java.util.Arrays; and then use Arrays.toString(arr) or Arrays.deepToString(arr) for arrays within arrays. Note that the Object[] version calls .toString() on each object in the array. The output is even decorated in the exact way you're asking.


Examples:


Output:


Output:


Output:


Output:


Always check the standard libraries first.  


Then try:


or if your array contains other arrays as elements:


This is nice to know, however, as for "always check the standard libraries first" I'd never have stumbled upon the trick of Arrays.toString( myarray )


--since I was concentrating on the type of myarray to see how to do this. I didn't want to have to iterate through the thing: I wanted an easy call to make it come out similar to what I see in the Eclipse debugger and myarray.toString() just wasn't doing it.


In JDK1.8 you can use aggregate operations and a lambda expression:


Starting with Java 8, one could also take advantage of the join() method provided by the String class to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below):


The output will be "Hey there amigo!".


If you're using Java 1.4, you can instead do:


(This works in 1.5+ too, of course.)


We could have used Arrays.toString(array) to print one dimensional array and Arrays.deepToString(array) for multi-dimensional arrays. 


Now we have got the option of Stream and lambda to print the array.


Printing One dimensional Array:


The output is:


[1, 2, 3, 4, 5]
  [John, Mary, Bob]
  1
  2
  3
  4
  5
  John
  Mary
  Bob


Printing Multi-dimensional Array
Just in case we want to print multi-dimensional array we can use Arrays.deepToString(array) as:


Now the point to observe is that the method Arrays.stream(T[]), which in case of int[] returns us Stream<int[]> and then method flatMapToInt() maps each element of stream with the contents of a mapped stream produced by applying the provided mapping function to each element.


The output is:


[[11, 12], [21, 22], [31, 32, 33]]
  [[John, Bravo], [Mary, Lee], [Bob, Johnson]]
  11
  12
  21
  22
  31
  32
  33
  John
  Bravo
  Mary
  Lee
  Bob
  Johnson


As a direct answer, the solution provided by several, including @Esko, using the Arrays.toString and Arrays.deepToString methods, is simply the best.


Below I try to list some of the other methods suggested, attempting to improve a little, with the most notable addition being the use of the Stream.collect operator, using a joining Collector, to mimic what the String.join is doing.


Arrays.deepToString(arr) only prints on one line. 


To actually get a table to print as a two dimensional table, I had to do this: 


It seems like the Arrays.deepToString(arr) method should take a separator string, but unfortunately it doesn't.


Different Ways to Print Arrays in Java:


Simple Way   


Output:
      [One, Two, Three, Four]


Using toString()


Output: [One, Two, Three, Four]


Printing Array of Arrays


Output: [[Ljava.lang.String;@1ad086a [[Ljava.lang.String;@10385c1,
  [Ljava.lang.String;@42719c] [[Fifth, Sixth], [Seventh, Eighth]]


Resource: Access An Array


Using regular for loop is the simplest way of printing array in my opinion.
Here you have a sample code based on your intArray


It gives output as yours
    1, 2, 3, 4, 5


It should always work whichever JDK version you use:


It will work if the Array contains Objects. If the Array contains primitive types, you can use wrapper classes instead storing the primitive directly as..


Example: 


Replace it with:


Update :


Yes ! this is to be mention that converting an array to an object array OR to use the Object's array is costly and may slow the execution. it happens by the nature of java called autoboxing.   


So only for printing purpose, It should not be used. we can make a function which takes an array as parameter and prints the desired format as


I came across this post in Vanilla #Java recently. It's not very convenient writing Arrays.toString(arr);, then importing java.util.Arrays; all the time.


Please note, this is not a permanent fix by any means. Just a hack that can make debugging simpler. 


Printing an array directly gives the internal representation and the hashCode. Now, all classes have Object as the parent-type. So, why not hack the Object.toString()? Without modification, the Object class looks like this:


What if this is changed to:


This modded class may simply be added to the class path by adding the following to the command line: -Xbootclasspath/p:target/classes.


Now, with the availability of deepToString(..) since Java 5, the toString(..) can easily be changed to deepToString(..) to add support for arrays that contain other arrays.


I found this to be a quite useful hack and it would be great if Java could simply add this. I understand potential issues with having very large arrays since the string representations could be problematic. Maybe pass something like a System.outor a PrintWriter for such eventualities. 


In java 8 it is easy. there are two keywords


method reference: ::println


If you want to print all elements in the array in the same line, then just use print instead of println i.e. 


Another way without method reference just use:


There's one additional way if your array is of type char[]:


prints 


To add to all the answers, printing the object as a JSON string is also an option.


Using Jackson:


Using Gson:


You could loop through the array,  printing out each item, as you loop. For example:


Output:


There Are Following way to print Array 


A simplified shortcut I've tried is this:


It will print


No loops required in this approach and it is best for small arrays only


For-each loop can also be used to print elements of array:


Using org.apache.commons.lang3.StringUtils.join(*) methods can be an option
For example:


I used the following dependency 


This is marked as a duplicate for printing a byte[]. Note: for a byte array there are additional methods which may be appropriate.


You can print it as a String if it contains ISO-8859-1 chars.


or if it contains a UTF-8 string


or if you want print it as hexadecimal.


or if you want print it as base64.


or if you want to print an array of signed byte values


or if you want to print an array of unsigned byte values


if you are running jdk 8. 


output:


In java 8 :


If using Commons.Lang library, we could do:


ArrayUtils.toString(array)


Output:


In JDK1.8 you can use aggregate operations and a lambda expression:


Also, starting with Java 8, one could also take advantage of the join() method provided by the String class to print out array elements, without the brackets, and separated by a delimiter of choice (which is the space character for the example shown below)


`
The output will be "Hey there amigo!"


There are several ways to print an array elements.First of all,  I'll explain that, what is an array?..Array is a simple data structure for storing data..When you define an array , Allocate set of ancillary memory blocks in RAM.Those memory blocks are taken  one unit ..


Ok, I'll create an array like this,


Now look at the output,





You can see an unknown string printed..As I mentioned before, the memory address whose array(number array) declared is printed.If you want to display elements in the array, you can use "for loop " , like this..


Now look at the output,





Ok,Successfully printed elements of one dimension  array..Now I am going to consider two dimension array..I'll declare two dimension array as "number2" and print the elements using "Arrays.deepToString()" keyword.Before using that You will have to import 'java.util.Arrays' library.


consider the output,





At the same time , Using two for loops ,2D elements can be printed..Thank you !



Sometimes when I run my application it gives me an error that looks like:


People have referred to this as a "stack trace". What is a stack trace? What can it tell me about the error that's happening in my program?


About this question - quite often I see a question come through where a novice programmer is "getting an error", and they simply paste their stack trace and some random block of code without understanding what the stack trace is or how they can use it. This question is intended as a reference for novice programmers who might need help understanding the value of a stack trace.


In simple terms, a stack trace is a list of the method calls that the application was in the middle of when an Exception was thrown.


Simple Example


With the example given in the question, we can determine exactly where the exception was thrown in the application. Let's have a look at the stack trace:


This is a very simple stack trace. If we start at the beginning of the list of "at ...", we can tell where our error happened. What we're looking for is the topmost method call that is part of our application. In this case, it's:


To debug this, we can open up Book.java and look at line 16, which is:


This would indicate that something (probably title) is null in the above code.


Example with a chain of exceptions


Sometimes applications will catch an Exception and re-throw it as the cause of another Exception.  This typically looks like:


This might give you a stack trace that looks like:


What's different about this one is the "Caused by". Sometimes exceptions will have multiple "Caused by" sections. For these, you typically want to find the "root cause", which will be one of the lowest "Caused by" sections in the stack trace. In our case, it's:


Again, with this exception we'd want to look at line 22 of Book.java to see what might cause the NullPointerException here.


More daunting example with library code


Usually stack traces are much more complex than the two examples above. Here's an example (it's a long one, but demonstrates several levels of chained exceptions):


In this example, there's a lot more. What we're mostly concerned about is looking for methods that are from our code, which would be anything in the com.example.myproject package. From the second example (above), we'd first want to look down for the root cause, which is:


However, all the method calls under that are library code. So we'll move up to the "Caused by" above it, and look for the first method call originating from our code, which is:


Like in previous examples, we should look at MyEntityService.java on line 59, because that's where this error originated (this one's a bit obvious what went wrong, since the SQLException states the error, but the debugging procedure is what we're after).


I am posting this answer so the topmost answer (when sorted by activity) is not one that is just plain wrong.


What is a Stacktrace?


A stacktrace is a very helpful debugging tool. It shows the call stack (meaning, the stack of functions that were called up to that point) at the time an uncaught exception was thrown (or the time the stacktrace was generated manually). This is very useful because it doesn't only show you where the error happened, but also how the program ended up in that place of the code.
This leads over to the next question:


What is an Exception?


An Exception is what the runtime environment uses to tell you that an error occurred. Popular examples are NullPointerException, IndexOutOfBoundsException or ArithmeticException. Each of these are caused when you try to do something that is not possible. For example, a NullPointerException will be thrown when you try to dereference a Null-object:


How should I deal with Stacktraces/Exceptions?


At first, find out what is causing the Exception. Try googleing the name of the exception to find out, what is the cause of that exception. Most of the time it will be caused by incorrect code. In the given examples above, all of the exceptions are caused by incorrect code. So for the NullPointerException example you could make sure that a is never null at that time. You could, for example, initialise a or include a check like this one:


This way, the offending line is not executed if a==null. Same goes for the other examples.


Sometimes you can't make sure that you don't get an exception. For example, if you are using a network connection in your program, you cannot stop the computer from loosing it's internet connection (e.g. you can't stop the user from disconnecting the computer's network connection). In this case the network library will probably throw an exception. Now you should catch the exception and handle it. This means, in the example with the network connection, you should try to reopen the connection or notify the user or something like that. Also, whenever you use catch, always catch only the exception you want to catch, do not use broad catch statements like catch (Exception e) that would catch all exceptions. This is very important, because otherwise you might accidentally catch the wrong exception and react in the wrong way.


Why should I not use catch (Exception e)?


Let's use a small example to show why you should not just catch all exceptions:


What this code is trying to do is to catch the ArithmeticException caused by a possible division by 0. But it also catches a possible NullPointerException that is thrown if a or b are null. This means, you might get a NullPointerException but you'll treat it as an ArithmeticException and probably do the wrong thing. In the best case you still miss that there was a NullPointerException. Stuff like that makes debugging much harder, so don't do that.


TLDR


If 1. is not possible, catch the specific exception and handle it.


To add on to what Rob has mentioned.  Setting break points in your application allows for the step-by-step processing of the stack.  This enables the developer to use the debugger to see at what exact point the method is doing something that was unanticipated.


Since Rob has used the NullPointerException (NPE) to illustrate something common, we can help to remove this issue in the following manner:  


if we have a method that takes parameters such as:  void (String firstName) 


In our code we would want to evaluate that firstName contains a value, we would do this like so: if(firstName == null || firstName.equals(""))  return;


The above prevents us from using firstName as an unsafe parameter.  Therefore  by doing null checks before processing we can help to ensure that our code will run properly.  To expand on an example that utilizes an object with methods we can look here:  


if(dog == null || dog.firstName == null)  return;


The above is the proper order to check for nulls, we start with the base object, dog in this case, and then begin walking down the tree of possibilities to make sure everything is valid before processing.  If the order were reversed a NPE could potentially be thrown and our program would crash.


There is one more stacktrace feature offered by Throwable family - the possibility to manipulate stack trace information.


Standard behavior:


Stack trace:


Manipulated stack trace:


Stack trace:


To understand the name: A stack trace is a a list of Exceptions( or you can say a list of "Cause by"), from the most surface Exception(e.g. Service Layer Exception) to the deepest one (e.g. Database Exception). Just like the reason we call it 'stack' is because stack is First in Last out (FILO), the deepest exception was happened in the very beginning, then a chain of exception was generated a series of consequences, the surface Exception was the last one happened in time, but we see it in the first place.


Key 1:A tricky and important thing here need to be understand is : the deepest cause may not be the "root cause", because if you write some "bad code", it may cause some exception underneath which is deeper than its layer. For example, a bad sql query may cause SQLServerException connection reset in the bottem instead of syndax error, which may just in the middle of the stack.


-> Locate the root cause in the middle is your job.



Key 2:Another tricky but important thing is inside each "Cause by" block, the first line was the deepest layer and happen first place for this block. For instance,


Book.java:16 was called by Auther.java:25 which was called by Bootstrap.java:14, Book.java:16 was the root cause.
Here attach a diagram sort the trace stack in chronological order.



Just to add to the other examples, there are inner(nested) classes that appear with the $ sign. For example:


Will result in this stack trace:


The other posts describe what a stack trace is, but it can still be hard to work with.


If you get a stack trace and want to trace the cause of the exception, a good start point in understanding it is to use the Java Stack Trace Console in Eclipse. If you use another IDE there may be a similar feature, but this answer is about Eclipse.


First, ensure that you have all of your Java sources accessible in an Eclipse project.


Then in the Java perspective, click on the Console tab (usually at the bottom). If the Console view is not visible, go to the menu option Window -> Show View and select Console.


Then in the console window, click on the following button (on the right)





and then select Java Stack Trace Console from the drop-down list.


Paste your stack trace into the console. It will then provide a list of links into your source code and any other source code available.


This is what you might see (image from the Eclipse documentation):





The most recent method call made will be the top of the stack, which is the top line (excluding the message text). Going down the stack goes back in time. The second line is the method that calls the first line, etc.


If you are using open-source software, you might need to download and attach to your project the sources if you want to examine. Download the source jars, in your project, open the Referenced Libraries folder to find your jar for your open-source module (the one with the class files) then right click, select Properties and attach the source jar.



I have a class defined as follows:


I tried to print an instance of my class:


but I got the following output: com.foo.Person@2f92e0f4.  


A similar thing happened when I tried to print an array of Person objects:


I got the output: [Lcom.foo.Person;@28a418fc


What does this output mean? How do I change this output so it contains the name of my person? And how do I print collections of my objects?


Note: this is intended as a canonical Q&A about this subject.


All Java objects have a toString() method, which is invoked when you try and print the object.


This method is defined in the Object class (the superclass of all Java objects). The Object.toString() method returns a fairly ugly looking string, composed of the name of the class, an @ symbol and the hashcode of the object in hexadecimal. The code for this looks like:


A result such as com.foo.MyType@2f92e0f4 can therefore be explained as:


The name of array classes look a little different, which is explained well in the Javadocs for Class.getName(). For instance, [Ljava.lang.String means:


To print something different when you call System.out.println(myObject), you must override the toString() method in your own class. Here's a simple example:


Now if we print a Person, we see their name rather than com.foo.Person@12345678.


Bear in mind that toString() is just one way for an object to be converted to a string. Typically this output should fully describe your object in a clear and concise manner. A better toString() for our Person class might be:


Which would print, e.g., Person[name=Henry]. That's a really useful piece of data for debugging/testing.


If you want to focus on just one aspect of your object or include a lot of jazzy formatting, you might be better to define a separate method instead, e.g. String toElegantReport() {...}.


Many IDEs offer support for auto-generating a toString() method, based on the fields in the class. See docs for Eclipse and IntelliJ, for example.


Several popular Java libraries offer this feature as well. Some examples include:


ToStringBuilder from Apache Commons Lang


MoreObjects.ToStringHelper from Google Guava


@ToString annotation from Project Lombok


So you've created a nice toString() for your class. What happens if that class is placed into an array or a collection?


If you have an array of objects, you can call Arrays.toString() to produce a simple representation of the contents of the array. For instance, consider this array of Person objects:


Note:  this is a call to a static method called toString() in the Arrays class, which is different to what we've been discussing above.


If you have a multi-dimensional array, you can use Arrays.deepToString() to achieve the same sort of output.


Most collections will produce a pretty output based on calling .toString() on every element.


So you just need to ensure your list elements define a nice toString() as discussed above.


I think apache provides a better util class which provides a function to get the string


Every class in Java has the toString() method in it by default, which is called if you pass some object of that class to System.out.println(). By default, this call returns the className@hashcode of that object.


You can override the toString method of a class to get different output. See this example


In Eclipse,
Go to your class,
Right click->source->Generate toString();


It will override the toString() method and will print the object of that class.


I prefer to use a utility function which uses GSON to de-serialize the Java object into JSON string.


In intellij you can auto generate toString method by  pressing alt+inset and then selecting toString() here is an out put for a test class:


As you can see, it generates a String by concatenating, several attributes of the class, for primitives it will print their values and for reference types it will use their class type (in this case to string method of Test2).   


By default, every Object in Java has the toString() method which outputs the ObjectType@HashCode. 


If you want more meaningfull information then you need to override the toString() method in your class. 


Now when you print the person object using System.out.prtinln(personObj); it will print the name of the person instead of the classname and hashcode. 


In your second case when you are trying to print the array, it prints [Lcom.foo.Person;@28a418fc the Array type and it's hashcode. 


If you want to print the person names, there are many ways.


You could write your own function that iterates each person and prints 


You could print it using Arrays.toString(). This seems the simplest to me. 


You could print it the java 8 way (using streams and method reference). 


There might be other ways as well. Hope this helps. :) 


If you Directly print any object of Person It will the ClassName@HashCode to the Code.


in your case com.foo.Person@2f92e0f4 is getting printed . Where Person is a class to which object belongs and 2f92e0f4 is hashCode of the Object.


Now if you try to Use the object of Person then it will print the name


If you look at the Object class (Parent class of all classes in Java) the toString() method implementation is 


whenever you print any object in Java then toString() will be call. Now it's up to you if you override  toString() then your method will call other Object class method call.



I'm a bit confused about how Java generics handle inheritance / polymorphism.


Assume the following hierarchy -


Animal (Parent)


Dog - Cat (Children)


So suppose I have a method doSomething(List<Animal> animals). By all the rules of inheritance and polymorphism, I would assume that a List<Dog> is a List<Animal> and a List<Cat> is a List<Animal> - and so either one could be passed to this method. Not so. If I want to achieve this behavior, I have to explicitly tell the method to accept a list of any subclass of Animal by saying doSomething(List<? extends Animal> animals). 


I understand that this is Java's behavior. My question is why? Why is polymorphism generally implicit, but when it comes to generics it must be specified?


No, a List<Dog> is not a List<Animal>. Consider what you can do with a List<Animal> - you can add any animal to it... including a cat. Now, can you logically add a cat to a litter of puppies? Absolutely not.


Suddenly you have a very confused cat.


Now, you can't add a Cat to a List<? extends Animal> because you don't know it's a List<Cat>. You can retrieve a value and know that it will be an Animal, but you can't add arbitrary animals. The reverse is true for List<? super Animal> - in that case you can add an Animal to it safely, but you don't know anything about what might be retrieved from it, because it could be a List<Object>.


What you are looking for is called covariant type parameters. This means that if one type of object can be substituted for another in a method (for instance, Animal can be replaced with Dog), the same applies to expressions using those objects (so List<Animal> could be replaced with List<Dog>). The problem is that covariance is not safe for mutable lists in general.  Suppose you have a List<Dog>, and it is being used as a List<Animal>.  What happens when you try to add a Cat to this List<Animal> which is really a List<Dog>?  Automatically allowing type parameters to be covariant breaks the type system.


It would be useful to add syntax to allow type parameters to be specified as covariant, which avoids the ? extends Foo in method declarations, but that does add additional complexity.


The reason a List<Dog> is not a List<Animal>, is that, for example, you can insert a Cat into a List<Animal>, but not into a List<Dog>... you can use wildcards to make generics more extensible where possible; for example, reading from  a List<Dog> is the similar to reading from a List<Animal> -- but not writing.


The Generics in the Java Language and the Section on Generics from the Java Tutorials have a very good, in-depth explanation as to why some things are or are not polymorphic or permitted with generics.


A point I think should be added to what other answers mention is that while


List<Dog> isn't-a List<Animal> in Java


it is also true that


A list of dogs is-a list of animals in English (under a reasonable interpretation)


The way the OP's intuition works - which is completely valid of course - is the latter sentence. However, if we apply this intuition we get a language that is not Java-esque in its type system: Suppose our language does allow adding a cat to our list of dogs. What would that mean? It would mean that the list ceases to be a list of dogs, and remains merely a list of animals. And a list of mammals, and a list of quadrapeds.


To put it another way: A List<Dog> in Java does not mean "a list of dogs" in English, it means "a list which can have dogs, and nothing else".


More generally, OP's intuition lends itself towards a language in which operations on objects can change their type, or rather, an object's type(s) is a (dynamic) function of its value.


I would say the whole point of Generics is that it doesn't allow that. Consider the situation with arrays, which do allow that type of covariance:


That code compiles fine, but throws a runtime error (java.lang.ArrayStoreException: java.lang.Boolean in the second line). It is not typesafe. The point of Generics is to add the compile time type safety, otherwise you could just stick with a plain class without generics.


Now there are times where you need to be more flexible and that is what the ? super Class and ? extends Class are for. The former is when you need to insert into a type Collection (for example), and the latter is for when you need to read from it, in a type safe manner. But the only way to do both at the same time is to have a specific type.


To understand the problem it's useful to make comparison to arrays.


List<Dog> is not subclass of List<Animal>.
But Dog[] is subclass of Animal[].


Arrays are reifiable and covariant. Reifiable means their type information is fully available at runtime. Therefore arrays provide runtime type safety but not compile-time type safety.


It's vice versa for generics:
Generics are erased and invariant. Therefore generics can't provide runtime type safety, but they provide compile-time type safety. In the code below if generics were covariant it will be possible to make heap pollution at line 3.


The answers given here didn't fully convince me. So instead, I make another example.


sounds fine, doesn't it? But you can only pass Consumers and Suppliers for Animals. If you have a Mammal consumer, but a Duck supplier, they should not fit although both are animals. In order to disallow this, additional restrictions have been added.


Instead of the above, we have to define relationships between the types we use.


E. g.,


makes sure that we can only use a supplier which provides us the right type of object for the consumer.


OTOH, we could as well do


where we go the other way: we define the type of the Supplier and restrict that it can be put into the Consumer.


We even can do


where, having the intuitive relations Life -> Animal -> Mammal -> Dog, Cat etc., we could even put a Mammal into a Life consumer, but not a String into a Life consumer.


The basis logic for such behavior is that Generics follow a mechanism of type erasure. So at run time you have no way if identifying the type of collection unlike arrays where there is no such erasure process. So coming back to your question...


So suppose there is a method as given below:


Now if java allows caller to add List of type Animal to this method then you might add wrong thing into collection and at run time too it will run due to type erasure. While in case of arrays you will get a run time exception for such scenarios...


Thus in essence this behavior is implemented so that one cannot add wrong thing into collection. Now  I believe type erasure exists so as to give compatibility with legacy java without generics....


Actually you can use an interface to achieve what you want.


}


you can then use the collections using


Subtyping is invariant for parameterized types. Even tough the class Dog is a subtype of Animal, the parameterized type List<Dog> is not a subtype of List<Animal>. In contrast, covariant subtyping is used by arrays, so the array
type Dog[] is a subtype of Animal[].


Invariant subtyping ensures that the type constraints enforced by Java are not violated. Consider the following code given by @Jon Skeet:


As stated by @Jon Skeet, this code is illegal, because otherwise it would violate the type constraints by returning a cat when a dog expected.


It is instructive to compare the above to analogous code for arrays.


The code is legal. However, throws an array store exception.
An array carries its type at run-time this way JVM can enforce
type safety of covariant subtyping. 


To understand this further let's look at the bytecode generated by javap of the class below:


Using the command javap -c Demonstration, this shows the following Java bytecode:


Observe that the translated code of method bodies are identical. Compiler replaced each parameterized type by its erasure. This property is crucial meaning that it did not break backwards compatibility.


In conclusion, run-time safety is not possible for parameterized types, since compiler replaces each parameterized type by its erasure. This makes parameterized types are nothing more than syntactic sugar.


The answer  as well as other answers are correct. I am  going to add to those answers with a solution that I think will be helpful.  I think this comes up often in programming. One thing to note is that for Collections (Lists, Sets, etc.) the main issue is adding to the Collection. That is where things break down.  Even removing is OK.  


In most cases, we can use Collection<? extends T> rather then Collection<T> and that should be the first choice.  However, I am finding cases where it is not easy to do that.  It is up for debate as to whether that is always the best thing to do.  I am presenting here a class DownCastCollection that can take convert a Collection<? extends T> to a Collection<T> (we can define similar classes for List, Set, NavigableSet,..) to be used when using the standard approach is very inconvenient.  Below is an example of how to use it (we could also use Collection<? extends Object> in this case, but I am keeping it simple to illustrate using DownCastCollection.


Now the class:


}


If you are sure that the list items are subclasses of that given super type, you can cast the list using this approach:


This is usefull when you want to pass the list inside of a constructor or iterate over it.


Lets take the example from JavaSE tutorial 


So why a list of dogs (circles) should not be considered implicitly a list of animals (shapes) is because of this situation:


So Java "architects" had 2 options which address this problem:


do not consider that a subtype is implicitly it's supertype, and give a compile error, like it happens now


consider the subtype to be it's supertype and restrict at compile the "add" method (so in the drawAll method, if a list of circles, subtype of shape, would be passed, the compiler should detected that and restrict you with compile error into doing that).


For obvious reasons, that chose the first way. 


We should also take in consideration how the compiler threats the generic classes: in "instantiates" a different type whenever we fill the generic arguments.


Thus we have ListOfAnimal, ListOfDog, ListOfCat, etc, which are distinct classes that end up being "created" by the compiler when we specify the generic arguments. And this is a flat hierarchy (actually regarding to List is not a hierarchy at all).


Another argument why covariance doesn't make sense in case of generic classes is the fact that at base all classes are the same - are List instances. Specialising a List by filling the generic argument doesn't extend the class, it just makes it work for that particular generic argument.


The problem has been well-identified. But there's a solution; make doSomething generic:


now you can call doSomething with either List<Dog> or List<Cat> or List<Animal>.


another solution is to build a new list


Further to the answer by Jon Skeet, which uses this example code:


At the deepest level, the problem here is that dogs and animals share a reference. That means that one way to make this work would be to copy the entire list, which would break reference equality:


After calling List<Animal> animals = new ArrayList<>(dogs);, you cannot subsequently directly assign animals to either dogs or cats:


therefore you can't put the wrong subtype of Animal into the list, because there is no wrong subtype -- any object of subtype ? extends Animal can be added to animals.


Obviously, this changes the semantics, since the lists animals and dogs are no longer shared, so adding to one list does not add to the other (which is exactly what you want, to avoid the problem that a Cat could be added to a list that is only supposed to contain Dog objects). Also, copying the entire list can be inefficient. However, this does solve the type equivalence problem, by breaking reference equality.


